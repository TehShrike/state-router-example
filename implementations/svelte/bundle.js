(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (process){
const uuid4 = require(`random-uuid-v4`)
const EventEmitter = require(`events`).EventEmitter

const artificialDelay = 50

const emitter = new EventEmitter()

module.exports = emitter

emitter.getTopics = getTopics
emitter.getTopic = getTopic
emitter.addTopic = addTopic
emitter.removeTopic = removeTopic
emitter.getTasks = getTasks
emitter.saveTasks = saveTasks
emitter.saveTopics = saveTopics
emitter.getCurrentUser = getCurrentUser
emitter.saveCurrentUser = saveCurrentUser
emitter.saveTask = saveTask

function getTopics(cb) {
	setTimeout(() => {
		cb(null, getTopicsSync())
	}, artificialDelay)
}

function getTopicsSync() {
	return JSON.parse(localStorage.getItem(`topics`))
}

function getTopic(topicId, cb) {
	setTimeout(() => {
		cb(null, getTopicSync(topicId))
	}, artificialDelay)
}

function getTopicSync(topicId) {
	return getTopicsSync().find(topic => topic.id === topicId)
}

function addTopic(name) {
	const topic = {
		name,
		id: uuid4(),
	}

	const topics = getTopicsSync()

	topics.push(topic)

	saveTasks(topic.id, [])
	saveTopics(topics)

	return topic
}

function removeTopic(topicId) {
	const topics = getTopicsSync()
	const index = topics.findIndex(topic => topic.id === topicId)
	topics.splice(index, 1)

	saveTopics(topics)
	process.nextTick(() => {
		localStorage.removeItem(topicId)
	})
}

function getTasks(topicId, cb) {
	if (typeof topicId === `function`) {
		cb = topicId
		topicId = null
	}

	setTimeout(() => {
		if (topicId) {
			cb(null, getTasksSync(topicId))
		} else {
			cb(null, getTasksMap())
		}
	}, artificialDelay)
}

function getTasksMap() {
	const topics = getTopicsSync()

	return topics.reduce((map, topic) => {
		const topicId = topic.id
		map[topicId] = getTasksSync(topicId)
		return map
	}, {})
}

function getTasksSync(topicId) {
	const json = localStorage.getItem(topicId)
	return json ? JSON.parse(localStorage.getItem(topicId)) : []
}

function saveTask(topicId, newTaskName) {
	const topicTasks = getTasksSync(topicId)
	const task = {
		name: newTaskName,
		done: false,
	}
	topicTasks.push(task)
	saveTasks(topicId, topicTasks)

	return task
}

function saveTasks(topicId, topicTasks) {
	localStorage.setItem(topicId, JSON.stringify(topicTasks))
	emitter.emit(`tasks saved`, topicId)
}

function saveTopics(topics) {
	localStorage.setItem(`topics`, JSON.stringify(topics))

	emitter.emit(`topics saved`)
}

function getCurrentUser() {
	return {
		name: localStorage.getItem(`currentUserName`),
	}
}

function saveCurrentUser(username) {
	if (username) {
		localStorage.setItem(`currentUserName`, username)
	} else {
		localStorage.removeItem(`currentUserName`)
	}
}

(function initialize() {
	if (!localStorage.getItem(`topics`)) {
		initializeDummyData()
	}
})()

function initializeDummyData() {
	console.log(`Initializing dummy data`)

	const topic1 = {
		name: `Important stuff`,
		id: uuid4(),
	}
	const topic2 = {
		name: `Not as important`,
		id: uuid4(),
	}

	saveTopics([ topic1, topic2 ])

	saveTasks(topic1.id, [{
		name: `Put on pants`,
		done: false,
	}, {
		name: `Visit chat room to see if you still pass the Turing test`,
		done: false,
	}])

	saveTasks(topic2.id, [{
		name: `Make cupcakes`,
		done: true,
	}, {
		name: `Eat cupcakes`,
		done: true,
	}, {
		name: `Write forum post rant about how chocolate cupcakes are the only good kind of cupcake`,
		done: false,
	}])
}


}).call(this,require('_process'))
},{"_process":17,"events":21,"random-uuid-v4":33}],2:[function(require,module,exports){
/* App.svelte generated by Svelte v3.0.0 */
"use strict";

const {
	SvelteComponent,
	append,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} = require("svelte/internal");

const { createEventDispatcher } = require("svelte");

function create_fragment(ctx) {
	var nav, div2, div0, ul, li0, a0, t0, a0_href_value, li0_class_value, t1, li1, a1, t2, a1_href_value, li1_class_value, t3, li2, a2, t4, a2_href_value, t5, div1, p, t6, t7_value = ctx.currentUser.name, t7, t8, uiView, dispose;

	return {
		c() {
			nav = element("nav");
			div2 = element("div");
			div0 = element("div");
			ul = element("ul");
			li0 = element("li");
			a0 = element("a");
			t0 = text("Basic todo app!");
			t1 = space();
			li1 = element("li");
			a1 = element("a");
			t2 = text("About the state router");
			t3 = space();
			li2 = element("li");
			a2 = element("a");
			t4 = text("\"Log out\"");
			t5 = space();
			div1 = element("div");
			p = element("p");
			t6 = text("Logged in as ");
			t7 = text(t7_value);
			t8 = space();
			uiView = element("uiView");
			a0.href = a0_href_value = ctx.asr.makePath('app.topics');
			li0.className = li0_class_value = ctx.asr.stateIsActive('app.topics') ? 'active' : '';
			a1.href = a1_href_value = ctx.asr.makePath('app.about');
			li1.className = li1_class_value = ctx.asr.stateIsActive('app.about') ? 'active' : '';
			a2.href = a2_href_value = ctx.asr.makePath('login');
			ul.className = "nav navbar-nav";
			div0.className = "navbar-header";
			p.className = "navbar-text";
			div1.className = "nav navbar-right";
			div2.className = "container-fluid";
			nav.className = "navbar navbar-default";
			dispose = listen(a2, "click", ctx.click_handler);
		},

		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, div2);
			append(div2, div0);
			append(div0, ul);
			append(ul, li0);
			append(li0, a0);
			append(a0, t0);
			append(ul, t1);
			append(ul, li1);
			append(li1, a1);
			append(a1, t2);
			append(ul, t3);
			append(ul, li2);
			append(li2, a2);
			append(a2, t4);
			append(div2, t5);
			append(div2, div1);
			append(div1, p);
			append(p, t6);
			append(p, t7);
			insert(target, t8, anchor);
			insert(target, uiView, anchor);
		},

		p(changed, ctx) {
			if ((changed.asr) && a0_href_value !== (a0_href_value = ctx.asr.makePath('app.topics'))) {
				a0.href = a0_href_value;
			}

			if ((changed.asr) && li0_class_value !== (li0_class_value = ctx.asr.stateIsActive('app.topics') ? 'active' : '')) {
				li0.className = li0_class_value;
			}

			if ((changed.asr) && a1_href_value !== (a1_href_value = ctx.asr.makePath('app.about'))) {
				a1.href = a1_href_value;
			}

			if ((changed.asr) && li1_class_value !== (li1_class_value = ctx.asr.stateIsActive('app.about') ? 'active' : '')) {
				li1.className = li1_class_value;
			}

			if ((changed.asr) && a2_href_value !== (a2_href_value = ctx.asr.makePath('login'))) {
				a2.href = a2_href_value;
			}

			if ((changed.currentUser) && t7_value !== (t7_value = ctx.currentUser.name)) {
				set_data(t7, t7_value);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(nav);
				detach(t8);
				detach(uiView);
			}

			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { currentUser = null, asr = null } = $$props;

	const dispatch = createEventDispatcher();

	function click_handler(event) {
		return dispatch('logout', event);
	}

	$$self.$set = $$props => {
		if ('currentUser' in $$props) $$invalidate('currentUser', currentUser = $$props.currentUser);
		if ('asr' in $$props) $$invalidate('asr', asr = $$props.asr);
	};

	return {
		currentUser,
		asr,
		dispatch,
		click_handler
	};
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["currentUser", "asr"]);
	}
}

module.exports = App;

},{"svelte":35,"svelte/internal":36}],3:[function(require,module,exports){
/* About.svelte generated by Svelte v3.0.0 */
"use strict";

const {
	SvelteComponent,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal
} = require("svelte/internal");

function create_fragment(ctx) {
	var div_5;

	return {
		c() {
			div_5 = element("div");
			div_5.innerHTML = `<div class="row"><div class="col-sm-offset-2 col-sm-8"><div class="jumbotron"><h1>About this example</h1></div></div></div>
				<div class="row"><div class="col-sm-offset-3 col-sm-6"><p>
							Pretty sweet, isn't it?  Here, let me give some examples or something.
						</p></div></div>`;
			div_5.className = "container";
		},

		m(target, anchor) {
			insert(target, div_5, anchor);
		},

		p: noop,
		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(div_5);
			}
		}
	};
}

class About extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

module.exports = About;

},{"svelte/internal":36}],4:[function(require,module,exports){
const component = require(`./About.svelte`)

module.exports = stateRouter => {
	stateRouter.addState({
		name: `app.about`,
		route: `/about`,
		template: component,
	})
}

},{"./About.svelte":3}],5:[function(require,module,exports){
const component = require(`./App.svelte`)
const model = require(`model.js`)

module.exports = stateRouter => {
	stateRouter.addState({
		name: `app`,
		route: `/app`,
		defaultChild: `topics`,
		template: component,
		resolve(data, parameters, cb) {
			const currentUser = model.getCurrentUser()

			if (currentUser.name) {
				cb(null, {
					currentUser,
				})
			} else {
				cb.redirect(`login`)
			}
		},
		activate({ domApi: svelte }) {
			console.log(`huh`)
			svelte.$on(`logout`, () => {
				model.saveCurrentUser(null)
				stateRouter.go(`login`)
			})
		},
	})

	require(`./about/about`)(stateRouter)
	require(`./topics/topics`)(stateRouter)
}

},{"./App.svelte":2,"./about/about":4,"./topics/topics":10,"model.js":1}],6:[function(require,module,exports){
/* Topics.svelte generated by Svelte v3.0.0 */
"use strict";

const {
	SvelteComponent,
	add_binding_callback,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_style,
	space,
	subscribe,
	text
} = require("svelte/internal");

const { createEventDispatcher } = require("svelte");

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.topic = list[i];
	return child_ctx;
}

// (33:4) {#each $topicsStore as topic}
function create_each_block(ctx) {
	var a, t0_value = ctx.topic.name, t0, t1, span, t2_value = ctx.$tasksUndoneStore[ctx.topic.id], t2, a_href_value, a_class_value;

	return {
		c() {
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			span = element("span");
			t2 = text(t2_value);
			span.className = "badge";
			a.href = a_href_value = ctx.asr.makePath('app.topics.tasks', { topicId: ctx.topic.id });
			a.className = a_class_value = "list-group-item " + (ctx.asr.stateIsActive('app.topics.tasks', { topicId: ctx.topic.id }) ? 'active' : '');
		},

		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t0);
			append(a, t1);
			append(a, span);
			append(span, t2);
		},

		p(changed, ctx) {
			if ((changed.$topicsStore) && t0_value !== (t0_value = ctx.topic.name)) {
				set_data(t0, t0_value);
			}

			if ((changed.$tasksUndoneStore || changed.$topicsStore) && t2_value !== (t2_value = ctx.$tasksUndoneStore[ctx.topic.id])) {
				set_data(t2, t2_value);
			}

			if ((changed.asr || changed.$topicsStore) && a_href_value !== (a_href_value = ctx.asr.makePath('app.topics.tasks', { topicId: ctx.topic.id }))) {
				a.href = a_href_value;
			}

			if ((changed.asr || changed.$topicsStore) && a_class_value !== (a_class_value = "list-group-item " + (ctx.asr.stateIsActive('app.topics.tasks', { topicId: ctx.topic.id }) ? 'active' : ''))) {
				a.className = a_class_value;
			}
		},

		d(detaching) {
			if (detaching) {
				detach(a);
			}
		}
	};
}

function create_fragment(ctx) {
	var div9, div8, div6, div0, t0, form, div5, div4, div3, div1, input, input_class_value, t1, div2, t3, div7, dispose;

	var each_value = ctx.$topicsStore;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div9 = element("div");
			div8 = element("div");
			div6 = element("div");
			div0 = element("div");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			form = element("form");
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			div1 = element("div");
			input = element("input");
			t1 = space();
			div2 = element("div");
			div2.innerHTML = `<button type="submit" class="btn btn-default pull-right">Add</button>`;
			t3 = space();
			div7 = element("div");
			div7.innerHTML = `<uiView></uiView>`;
			div0.className = "list-group";
			attr(input, "type", "text");
			input.className = input_class_value = "form-control " + ctx.hiddenIfNot(ctx.addingTopic);
			input.placeholder = "Topic name";
			div1.className = "table-cell";
			div2.className = "table-cell";
			set_style(div2, "width", "60px");
			set_style(div2, "vertical-align", "top");
			div3.className = "table-row";
			div4.className = "table-row-group";
			div5.className = "table";
			form.action = "";
			attr(form, "onsubmit", "return false");
			div6.className = "col-sm-4";
			div7.className = "col-sm-8";
			div8.className = "row";
			div9.className = "container";

			dispose = [
				listen(input, "input", ctx.input_input_handler),
				listen(form, "submit", ctx.addTopic)
			];
		},

		m(target, anchor) {
			insert(target, div9, anchor);
			append(div9, div8);
			append(div8, div6);
			append(div6, div0);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append(div6, t0);
			append(div6, form);
			append(form, div5);
			append(div5, div4);
			append(div4, div3);
			append(div3, div1);
			append(div1, input);

			input.value = ctx.newTopic;

			add_binding_callback(() => ctx.input_binding(input, null));
			append(div3, t1);
			append(div3, div2);
			append(div8, t3);
			append(div8, div7);
		},

		p(changed, ctx) {
			if (changed.asr || changed.$topicsStore || changed.$tasksUndoneStore) {
				each_value = ctx.$topicsStore;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}

			if (changed.newTopic) input.value = ctx.newTopic;
			if (changed.items) {
				ctx.input_binding(null, input);
				;
				ctx.input_binding(input, null);
			}

			if ((changed.addingTopic) && input_class_value !== (input_class_value = "form-control " + ctx.hiddenIfNot(ctx.addingTopic))) {
				input.className = input_class_value;
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(div9);
			}

			destroy_each(each_blocks, detaching);

			ctx.input_binding(null, input);
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $topicsStore, $tasksUndoneStore;

	const dispatch = createEventDispatcher()

	let { topicsStore } = $$props; subscribe($$self, topicsStore, $$value => { $topicsStore = $$value; $$invalidate('$topicsStore', $topicsStore) });
	let { tasksUndoneStore, asr } = $$props; subscribe($$self, tasksUndoneStore, $$value => { $tasksUndoneStore = $$value; $$invalidate('$tasksUndoneStore', $tasksUndoneStore) });

	let addingTopic = false
	let newTopic = ''
	let newTopicNameInput = null


	const addTopic = () => {
		if (addingTopic && newTopic) {
			dispatch('add-topic', newTopic)
			$$invalidate('newTopic', newTopic = '')
		} else if (!addingTopic) {
			newTopicNameInput.focus()
		}

		$$invalidate('addingTopic', addingTopic = !addingTopic)
	}

	const hiddenIfNot = bool => bool ? '' : 'hidden'

	function input_input_handler() {
		newTopic = this.value;
		$$invalidate('newTopic', newTopic);
	}

	function input_binding($$node, check) {
		newTopicNameInput = $$node;
		$$invalidate('newTopicNameInput', newTopicNameInput);
	}

	$$self.$set = $$props => {
		if ('topicsStore' in $$props) $$invalidate('topicsStore', topicsStore = $$props.topicsStore);
		if ('tasksUndoneStore' in $$props) $$invalidate('tasksUndoneStore', tasksUndoneStore = $$props.tasksUndoneStore);
		if ('asr' in $$props) $$invalidate('asr', asr = $$props.asr);
	};

	return {
		topicsStore,
		tasksUndoneStore,
		asr,
		addingTopic,
		newTopic,
		newTopicNameInput,
		addTopic,
		hiddenIfNot,
		$topicsStore,
		$tasksUndoneStore,
		input_input_handler,
		input_binding
	};
}

class Topics extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["topicsStore", "tasksUndoneStore", "asr"]);
	}
}

module.exports = Topics;

},{"svelte":35,"svelte/internal":36}],7:[function(require,module,exports){
/* NoTaskSelected.svelte generated by Svelte v3.0.0 */
"use strict";

const {
	SvelteComponent,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	space
} = require("svelte/internal");

function create_fragment(ctx) {
	var p0, t_1, p1;

	return {
		c() {
			p0 = element("p");
			p0.textContent = "This is a very basic todo app\tto show off route states.";
			t_1 = space();
			p1 = element("p");
			p1.textContent = "Click on one of the topics on the left, and watch both the url and this half of the screen change, without anything else in the dom changing!";
		},

		m(target, anchor) {
			insert(target, p0, anchor);
			insert(target, t_1, anchor);
			insert(target, p1, anchor);
		},

		p: noop,
		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(p0);
				detach(t_1);
				detach(p1);
			}
		}
	};
}

class NoTaskSelected extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

module.exports = NoTaskSelected;

},{"svelte/internal":36}],8:[function(require,module,exports){
/* Tasks.svelte generated by Svelte v3.0.0 */
"use strict";

const {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text
} = require("svelte/internal");

const { createEventDispatcher } = require("svelte");

function add_css() {
	var style = element("style");
	style.id = 'svelte-14kfya1-style';
	style.textContent = ".done-checkbox.svelte-14kfya1::before{margin-left:.2em}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.task = list[i];
	child_ctx.i = i;
	return child_ctx;
}

// (45:6) {#if task.done}
function create_if_block_1(ctx) {
	var span;

	return {
		c() {
			span = element("span");
			span.className = "glyphicon glyphicon-ok text-success done-checkbox svelte-14kfya1";
		},

		m(target, anchor) {
			insert(target, span, anchor);
		},

		d(detaching) {
			if (detaching) {
				detach(span);
			}
		}
	};
}

// (54:5) {:else}
function create_else_block(ctx) {
	var button, dispose;

	function click_handler_1() {
		return ctx.click_handler_1(ctx);
	}

	return {
		c() {
			button = element("button");
			button.textContent = "Complete";
			button.className = "btn btn-success full-width";
			dispose = listen(button, "click", click_handler_1);
		},

		m(target, anchor) {
			insert(target, button, anchor);
		},

		p(changed, new_ctx) {
			ctx = new_ctx;
		},

		d(detaching) {
			if (detaching) {
				detach(button);
			}

			dispose();
		}
	};
}

// (52:5) {#if task.done}
function create_if_block(ctx) {
	var button, dispose;

	function click_handler() {
		return ctx.click_handler(ctx);
	}

	return {
		c() {
			button = element("button");
			button.textContent = "Restore";
			button.className = "btn btn-primary full-width";
			dispose = listen(button, "click", click_handler);
		},

		m(target, anchor) {
			insert(target, button, anchor);
		},

		p(changed, new_ctx) {
			ctx = new_ctx;
		},

		d(detaching) {
			if (detaching) {
				detach(button);
			}

			dispose();
		}
	};
}

// (40:2) {#each tasks as task, i}
function create_each_block(ctx) {
	var tr, td0, span, t0_value = ctx.task.name, t0, t1, td0_class_value, t2, td1, t3, td2, button, dispose;

	var if_block0 = (ctx.task.done) && create_if_block_1(ctx);

	function select_block_type(ctx) {
		if (ctx.task.done) return create_if_block;
		return create_else_block;
	}

	var current_block_type = select_block_type(ctx);
	var if_block1 = current_block_type(ctx);

	function click_handler_2() {
		return ctx.click_handler_2(ctx);
	}

	return {
		c() {
			tr = element("tr");
			td0 = element("td");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			td1 = element("td");
			if_block1.c();
			t3 = space();
			td2 = element("td");
			button = element("button");
			button.textContent = "Remove";
			span.className = "center-y";
			td0.className = td0_class_value = "" + ctx.ifThenStr(ctx.task.done, 'text-muted') + " center-y" + " svelte-14kfya1";
			button.className = "btn btn-danger full-width";
			dispose = listen(button, "click", click_handler_2);
		},

		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, span);
			append(span, t0);
			append(span, t1);
			if (if_block0) if_block0.m(span, null);
			append(tr, t2);
			append(tr, td1);
			if_block1.m(td1, null);
			append(tr, t3);
			append(tr, td2);
			append(td2, button);
		},

		p(changed, new_ctx) {
			ctx = new_ctx;
			if ((changed.tasks) && t0_value !== (t0_value = ctx.task.name)) {
				set_data(t0, t0_value);
			}

			if (ctx.task.done) {
				if (!if_block0) {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(span, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if ((changed.tasks) && td0_class_value !== (td0_class_value = "" + ctx.ifThenStr(ctx.task.done, 'text-muted') + " center-y" + " svelte-14kfya1")) {
				td0.className = td0_class_value;
			}

			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);
				if (if_block1) {
					if_block1.c();
					if_block1.m(td1, null);
				}
			}
		},

		d(detaching) {
			if (detaching) {
				detach(tr);
			}

			if (if_block0) if_block0.d();
			if_block1.d();
			dispose();
		}
	};
}

function create_fragment(ctx) {
	var h1, t0_value = ctx.topic.name, t0, t1, table, thead, t7, tbody, t8, tr_1, td, input, dispose;

	var each_value = ctx.tasks;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			table = element("table");
			thead = element("thead");
			thead.innerHTML = `<tr><th>
							Task name
						</th>
						<th style="width: 100px">
							Complete
						</th>
						<th style="width: 87px">
							Remove
						</th></tr>`;
			t7 = space();
			tbody = element("tbody");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t8 = space();
			tr_1 = element("tr");
			td = element("td");
			input = element("input");
			attr(input, "type", "text");
			input.className = "form-control add-new-task";
			input.placeholder = "New task";
			table.className = "table table-striped";

			dispose = [
				listen(input, "input", ctx.input_input_handler),
				listen(input, "keyup", ctx.keyup_handler)
			];
		},

		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, table, anchor);
			append(table, thead);
			append(table, t7);
			append(table, tbody);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			append(tbody, t8);
			append(tbody, tr_1);
			append(tr_1, td);
			append(td, input);

			input.value = ctx.newTaskName;
		},

		p(changed, ctx) {
			if ((changed.topic) && t0_value !== (t0_value = ctx.topic.name)) {
				set_data(t0, t0_value);
			}

			if (changed.tasks || changed.ifThenStr) {
				each_value = ctx.tasks;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, t8);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}

			if (changed.newTaskName) input.value = ctx.newTaskName;
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(table);
			}

			destroy_each(each_blocks, detaching);

			run_all(dispose);
		}
	};
}

function complete(taskIndex) {
__this.setTaskDone(taskIndex, true)
}

function restore(taskIndex) {
__this.setTaskDone(taskIndex, false)
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher()

let { topic, tasks, newTaskName = `` } = $$props;

const ifThenStr = (test, result) => test ? result : ``

	function click_handler({ i }) {
		return restore(i);
	}

	function click_handler_1({ i }) {
		return complete(i);
	}

	function click_handler_2({ i }) {
		return dispatch('remove', i);
	}

	function input_input_handler() {
		newTaskName = this.value;
		$$invalidate('newTaskName', newTaskName);
	}

	function keyup_handler(event) {
		return dispatch('newTaskKeyup', event);
	}

	$$self.$set = $$props => {
		if ('topic' in $$props) $$invalidate('topic', topic = $$props.topic);
		if ('tasks' in $$props) $$invalidate('tasks', tasks = $$props.tasks);
		if ('newTaskName' in $$props) $$invalidate('newTaskName', newTaskName = $$props.newTaskName);
	};

	return {
		dispatch,
		topic,
		tasks,
		newTaskName,
		ifThenStr,
		click_handler,
		click_handler_1,
		click_handler_2,
		input_input_handler,
		keyup_handler
	};
}

class Tasks extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-14kfya1-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, ["topic", "tasks", "newTaskName", "complete", "restore"]);
	}

	get complete() {
		return complete;
	}

	get restore() {
		return restore;
	}
}

module.exports = Tasks;

},{"svelte":35,"svelte/internal":36}],9:[function(require,module,exports){
const component = require(`./Tasks.svelte`)
const model = require(`model.js`)
const all = require(`async-all`)

const UUID_V4_REGEX = `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`

module.exports = function(stateRouter) {
	stateRouter.addState({
		name: `app.topics.tasks`,
		route: `/:topicId(` + UUID_V4_REGEX + `)`,
		template: {
			component,
			options: {
				methods: {
					setTaskDone(index, done) {
						const { topicId, tasks } = this.get()

						// This should be done inside the component
						tasks[index].done = done
						this.set({ tasks })

						// this should be done via an event
						model.saveTasks(topicId, tasks)
					},
				},
			},
		},
		resolve(data, { topicId }, cb) {
			all({
				topic: cb => model.getTopic(topicId, cb),
				tasks: cb => model.getTasks(topicId, cb),
				topicId,
			}, cb)
		},
		activate(context) {
			const svelte = context.domApi
			const topicId = context.parameters.topicId

			svelte.$on(`newTaskKeyup`, e => {
				const { newTaskName } = svelte.get()
				if (e.keyCode === 13 && newTaskName) {
					createNewTask(newTaskName)
					svelte.set({
						newTaskName: ``,
					})
				}
			})

			svelte.$on(`remove`, function(taskIndex) {
				const topicId = this.get().topicId
				const tasksWithIndexElementRemoved = this.get().tasks.slice()

				tasksWithIndexElementRemoved.splice(taskIndex, 1)

				this.set({
					tasks: tasksWithIndexElementRemoved,
				})

				model.saveTasks(topicId, tasksWithIndexElementRemoved)
			})

			function createNewTask(taskName) {
				const task = model.saveTask(topicId, taskName)
				const newTasks = svelte.get().tasks.concat(task)
				svelte.set({
					tasks: newTasks,
				})
			}

			svelte.mountedToTarget.querySelector(`.add-new-task`).focus()
		},
	})

	stateRouter.addState({
		name: `app.topics.no-task`,
		route: ``,
		template: require(`./NoTaskSelected.svelte`),
	})
}

},{"./NoTaskSelected.svelte":7,"./Tasks.svelte":8,"async-all":15,"model.js":1}],10:[function(require,module,exports){
const component = require(`./Topics.svelte`)
const model = require(`model.js`)
const { value, computed } = require(`warg`)
const mapObject = require(`map-obj`)

const makeUndoneTasksComputed = tasks => computed({
	tasks,
}, ({ tasks }) =>
	mapObject(tasks, (taskId, tasks) => [ taskId, tasks.reduce((toDo, task) => toDo + (task.done ? 0 : 1), 0) ])
)

module.exports = function(stateRouter) {
	stateRouter.addState({
		name: `app.topics`,
		route: `/topics`,
		defaultChild: `no-task`,
		template: component,
		resolve(data, parameters, cb) {
			model.getTopics((err, topics) => {
				const tasksStore = value({})
				const topicsStore = value(topics)
				cb(null, {
					topicsStore,
					tasksStore,
					tasksUndoneStore: makeUndoneTasksComputed(tasksStore),
				})
			})
		},
		activate(context) {
			const svelte = context.domApi
			const { tasksStore, topicsStore } = context.content

			const updateTasks = topicId => {
				model.getTasks(topicId, (err, tasks) => {
					tasksStore.set(
						Object.assign({}, tasksStore.get(), {
							[topicId]: tasks,
						})
					)
				})
			}

			topicsStore.get().forEach(({ id: topicId }) => updateTasks(topicId))

			model.on(`tasks saved`, updateTasks)

			svelte.$on(`add-topic`, ({ detail: newTopicName }) => {
				const newTopic = model.addTopic(newTopicName)

				topicsStore.set([ ...topicsStore.get(), newTopic ])
				updateTasks(newTopic.id)

				stateRouter.go(`app.topics.tasks`, {
					topicId: newTopic.id,
				})

				return false
			})

			context.on(`destroy`, () => {
				model.removeListener(`tasks saved`, updateTasks)
			})
		},
	})

	require(`./tasks/tasks`)(stateRouter)
}

},{"./Topics.svelte":6,"./tasks/tasks":9,"map-obj":27,"model.js":1,"warg":40}],11:[function(require,module,exports){
const StateRouter = require(`abstract-state-router`)
const SvelteRenderer = require(`svelte-state-renderer`)
const domready = require(`domready`)

domready(() => {
	const stateRouter = StateRouter(SvelteRenderer(), document.querySelector(`body`))

	require(`./login/login.js`)(stateRouter)
	require(`./app/app.js`)(stateRouter)

	stateRouter.evaluateCurrentRoute(`login`)
})

},{"./app/app.js":5,"./login/login.js":13,"abstract-state-router":14,"domready":19,"svelte-state-renderer":42}],12:[function(require,module,exports){
/* Login.svelte generated by Svelte v3.0.0 */
"use strict";

const {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	space,
	text
} = require("svelte/internal");

const { createEventDispatcher } = require("svelte");

function create_fragment(ctx) {
	var div8, div1, t1, div4, t5, div7, div6, div5, form, label, t6, input, t7, button, dispose;

	return {
		c() {
			div8 = element("div");
			div1 = element("div");
			div1.innerHTML = `<div class="col-sm-offset-3 col-sm-6"><h1>Welcome to the abstract-state-router demo!</h1></div>`;
			t1 = space();
			div4 = element("div");
			div4.innerHTML = `<div class="col-sm-offset-3 col-sm-6"><div class="well"><p class="lead">
								This is a demo webapp showing off basic usage of the <a href="https://github.com/TehShrike/abstract-state-router">abstract-state-router</a> library using a few different templating libraries.
							</p></div></div>`;
			t5 = space();
			div7 = element("div");
			div6 = element("div");
			div5 = element("div");
			form = element("form");
			label = element("label");
			t6 = text("Put in whatever username you feel like:\n\t\t\t\t\t\t");
			input = element("input");
			t7 = space();
			button = element("button");
			button.textContent = "\"Log in\"";
			div1.className = "row";
			div4.className = "row margin-top-20";
			attr(input, "type", "text");
			input.className = "form-control";
			button.type = "submit";
			button.className = "btn btn-primary";
			attr(form, "onsubmit", "return false");
			form.className = "panel-body";
			form.action = "";
			div5.className = "form-group panel";
			div6.className = "col-sm-offset-4 col-sm-4";
			div7.className = "row margin-top-20";
			div8.className = "container-fluid";

			dispose = [
				listen(input, "input", ctx.input_input_handler),
				listen(form, "submit", ctx.onSubmit)
			];
		},

		m(target, anchor) {
			insert(target, div8, anchor);
			append(div8, div1);
			append(div8, t1);
			append(div8, div4);
			append(div8, t5);
			append(div8, div7);
			append(div7, div6);
			append(div6, div5);
			append(div5, form);
			append(form, label);
			append(label, t6);
			append(label, input);

			input.value = ctx.username;

			append(form, t7);
			append(form, button);
		},

		p(changed, ctx) {
			if (changed.username) input.value = ctx.username;
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(div8);
			}

			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher()
	let username = ''

	const onSubmit = () => {
		if (username) {
			dispatch('login', username)
		}
	}

	function input_input_handler() {
		username = this.value;
		$$invalidate('username', username);
	}

	return { username, onSubmit, input_input_handler };
}

class Login extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

module.exports = Login;

},{"svelte":35,"svelte/internal":36}],13:[function(require,module,exports){
const component = require(`./Login.svelte`)
const model = require(`model.js`)

module.exports = stateRouter => {
	stateRouter.addState({
		name: `login`,
		route: `/login`,
		template: component,
		activate({ domApi: svelte }) {
			svelte.$on(`login`, event => {
				const username = event.detail
				model.saveCurrentUser(username)
				stateRouter.go(`app`)
			})
		},
	})
}

},{"./Login.svelte":12,"model.js":1}],14:[function(require,module,exports){
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var combineArrays = _interopDefault(require('combine-arrays'));
var pathToRegexpWithReversibleKeys = _interopDefault(require('path-to-regexp-with-reversible-keys'));
var thenDenodeify = _interopDefault(require('then-denodeify'));
var eventemitter3 = _interopDefault(require('eventemitter3'));
var hashBrownRouter = _interopDefault(require('hash-brown-router'));
var pagePathBuilder = _interopDefault(require('page-path-builder'));
var isoNextTick = _interopDefault(require('iso-next-tick'));

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var stateStringParser = createCommonjsModule(function (module) {
	module.exports = function (stateString) {
		return stateString.split('.').reduce(function (stateNames, latestNameChunk) {
			stateNames.push(stateNames.length ? stateNames[stateNames.length - 1] + '.' + latestNameChunk : latestNameChunk);

			return stateNames;
		}, []);
	};
});

var stateState = function StateState() {
	var states = {};

	function getHierarchy(name) {
		var names = stateStringParser(name);

		return names.map(function (name) {
			if (!states[name]) {
				throw new Error('State ' + name + ' not found');
			}
			return states[name];
		});
	}

	function getParent(name) {
		var parentName = getParentName(name);

		return parentName && states[parentName];
	}

	function getParentName(name) {
		var names = stateStringParser(name);

		if (names.length > 1) {
			var secondToLast = names.length - 2;

			return names[secondToLast];
		} else {
			return null;
		}
	}

	function guaranteeAllStatesExist(newStateName) {
		var stateNames = stateStringParser(newStateName);
		var statesThatDontExist = stateNames.filter(function (name) {
			return !states[name];
		});

		if (statesThatDontExist.length > 0) {
			throw new Error('State ' + statesThatDontExist[statesThatDontExist.length - 1] + ' does not exist');
		}
	}

	function buildFullStateRoute(stateName) {
		return getHierarchy(stateName).map(function (state) {
			return '/' + (state.route || '');
		}).join('').replace(/\/{2,}/g, '/');
	}

	function applyDefaultChildStates(stateName) {
		var state = states[stateName];

		var defaultChildStateName = state && (typeof state.defaultChild === 'function' ? state.defaultChild() : state.defaultChild);

		if (!defaultChildStateName) {
			return stateName;
		}

		var fullStateName = stateName + '.' + defaultChildStateName;

		return applyDefaultChildStates(fullStateName);
	}

	return {
		add: function add(name, state) {
			states[name] = state;
		},
		get: function get(name) {
			return name && states[name];
		},

		getHierarchy: getHierarchy,
		getParent: getParent,
		getParentName: getParentName,
		guaranteeAllStatesExist: guaranteeAllStatesExist,
		buildFullStateRoute: buildFullStateRoute,
		applyDefaultChildStates: applyDefaultChildStates
	};
};

var extend = function extend() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Object.assign.apply(Object, [{}].concat(args));
};

var stateComparison_1 = function StateComparison(stateState) {
	var getPathParameters = pathParameters();

	var parametersChanged = function parametersChanged(args) {
		return parametersThatMatterWereChanged(extend(args, { stateState: stateState, getPathParameters: getPathParameters }));
	};

	return function (args) {
		return stateComparison(extend(args, { parametersChanged: parametersChanged }));
	};
};

function pathParameters() {
	var parameters = {};

	return function (path) {
		if (!path) {
			return [];
		}

		if (!parameters[path]) {
			parameters[path] = pathToRegexpWithReversibleKeys(path).keys.map(function (key) {
				return key.name;
			});
		}

		return parameters[path];
	};
}

function parametersThatMatterWereChanged(_ref) {
	var stateState = _ref.stateState,
	    getPathParameters = _ref.getPathParameters,
	    stateName = _ref.stateName,
	    fromParameters = _ref.fromParameters,
	    toParameters = _ref.toParameters;

	var state = stateState.get(stateName);
	var querystringParameters = state.querystringParameters || [];
	var parameters = getPathParameters(state.route).concat(querystringParameters);

	return Array.isArray(parameters) && parameters.some(function (key) {
		return fromParameters[key] !== toParameters[key];
	});
}

function stateComparison(_ref2) {
	var parametersChanged = _ref2.parametersChanged,
	    original = _ref2.original,
	    destination = _ref2.destination;

	var states = combineArrays({
		start: stateStringParser(original.name),
		end: stateStringParser(destination.name)
	});

	return states.map(function (_ref3) {
		var start = _ref3.start,
		    end = _ref3.end;
		return {
			nameBefore: start,
			nameAfter: end,
			stateNameChanged: start !== end,
			stateParametersChanged: start === end && parametersChanged({
				stateName: start,
				fromParameters: original.parameters,
				toParameters: destination.parameters
			})
		};
	});
}

var currentState = function CurrentState() {
	var current = {
		name: '',
		parameters: {}
	};

	return {
		get: function get() {
			return current;
		},
		set: function set(name, parameters) {
			current = {
				name: name,
				parameters: parameters
			};
		}
	};
};

var stateChangeLogic = function stateChangeLogic(stateComparisonResults) {
	var hitChangingState = false;
	var hitDestroyedState = false;

	var output = {
		destroy: [],
		change: [],
		create: []
	};

	stateComparisonResults.forEach(function (state) {
		hitChangingState = hitChangingState || state.stateParametersChanged;
		hitDestroyedState = hitDestroyedState || state.stateNameChanged;

		if (state.nameBefore) {
			if (hitDestroyedState) {
				output.destroy.push(state.nameBefore);
			} else if (hitChangingState) {
				output.change.push(state.nameBefore);
			}
		}

		if (state.nameAfter && hitDestroyedState) {
			output.create.push(state.nameAfter);
		}
	});

	return output;
};

var stateTransitionManager = function stateTransitionManager(emitter) {
	var currentTransitionAttempt = null;
	var nextTransition = null;

	function doneTransitioning() {
		currentTransitionAttempt = null;
		if (nextTransition) {
			beginNextTransitionAttempt();
		}
	}

	var isTransitioning = function isTransitioning() {
		return !!currentTransitionAttempt;
	};

	function beginNextTransitionAttempt() {
		currentTransitionAttempt = nextTransition;
		nextTransition = null;
		currentTransitionAttempt.beginStateChange();
	}

	function cancelCurrentTransition() {
		currentTransitionAttempt.transition.cancelled = true;
		var err = new Error('State transition cancelled by the state transition manager');
		err.wasCancelledBySomeoneElse = true;
		emitter.emit('stateChangeCancelled', err);
	}

	emitter.on('stateChangeAttempt', function (beginStateChange) {
		nextTransition = createStateTransitionAttempt(beginStateChange);

		if (isTransitioning() && currentTransitionAttempt.transition.cancellable) {
			cancelCurrentTransition();
		} else if (!isTransitioning()) {
			beginNextTransitionAttempt();
		}
	});

	emitter.on('stateChangeError', doneTransitioning);
	emitter.on('stateChangeCancelled', doneTransitioning);
	emitter.on('stateChangeEnd', doneTransitioning);

	function createStateTransitionAttempt(_beginStateChange) {
		var transition = {
			cancelled: false,
			cancellable: true
		};
		return {
			transition: transition,
			beginStateChange: function beginStateChange() {
				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				return _beginStateChange.apply(undefined, [transition].concat(args));
			}
		};
	}
};

var defaultRouterOptions = { reverse: false };

// Pulled from https://github.com/joliss/promise-map-series and prettied up a bit

var promiseMapSeries = function sequence(array, iterator) {
	var currentPromise = Promise.resolve();
	return Promise.all(array.map(function (value, i) {
		return currentPromise = currentPromise.then(function () {
			return iterator(value, i, array);
		});
	}));
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var getProperty = function getProperty(name) {
	return function (obj) {
		return obj[name];
	};
};
var reverse = function reverse(ary) {
	return ary.slice().reverse();
};
var isFunction = function isFunction(property) {
	return function (obj) {
		return typeof obj[property] === 'function';
	};
};
var isThenable = function isThenable(object) {
	return object && ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' || typeof object === 'function') && typeof object.then === 'function';
};
var promiseMe = function promiseMe(fn) {
	for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		args[_key - 1] = arguments[_key];
	}

	return new Promise(function (resolve) {
		return resolve(fn.apply(undefined, args));
	});
};

var expectedPropertiesOfAddState = ['name', 'route', 'defaultChild', 'data', 'template', 'resolve', 'activate', 'querystringParameters', 'defaultQuerystringParameters', 'defaultParameters'];

var abstractStateRouter = function StateProvider(makeRenderer, rootElement) {
	var stateRouterOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	var prototypalStateHolder = stateState();
	var lastCompletelyLoadedState = currentState();
	var lastStateStartedActivating = currentState();
	var stateProviderEmitter = new eventemitter3();
	var compareStartAndEndStates = stateComparison_1(prototypalStateHolder);

	var stateNameToArrayofStates = function stateNameToArrayofStates(stateName) {
		return stateStringParser(stateName).map(prototypalStateHolder.get);
	};

	stateTransitionManager(stateProviderEmitter);

	var _extend = extend({
		throwOnError: true,
		pathPrefix: '#'
	}, stateRouterOptions),
	    throwOnError = _extend.throwOnError,
	    pathPrefix = _extend.pathPrefix;

	var router = stateRouterOptions.router || hashBrownRouter(defaultRouterOptions);

	router.on('not found', function (route, parameters) {
		stateProviderEmitter.emit('routeNotFound', route, parameters);
	});

	var destroyDom = null;
	var getDomChild = null;
	var renderDom = null;
	var resetDom = null;

	var activeStateResolveContent = {};
	var activeDomApis = {};
	var activeEmitters = {};

	function handleError(event, err) {
		isoNextTick(function () {
			stateProviderEmitter.emit(event, err);
			console.error(event + ' - ' + err.message);
			if (throwOnError) {
				throw err;
			}
		});
	}

	function destroyStateName(stateName) {
		var state = prototypalStateHolder.get(stateName);
		stateProviderEmitter.emit('beforeDestroyState', {
			state: state,
			domApi: activeDomApis[stateName]
		});

		activeEmitters[stateName].emit('destroy');
		activeEmitters[stateName].removeAllListeners();
		delete activeEmitters[stateName];
		delete activeStateResolveContent[stateName];

		return destroyDom(activeDomApis[stateName]).then(function () {
			delete activeDomApis[stateName];
			stateProviderEmitter.emit('afterDestroyState', {
				state: state
			});
		});
	}

	function resetStateName(parameters, stateName) {
		var domApi = activeDomApis[stateName];
		var content = getContentObject(activeStateResolveContent, stateName);
		var state = prototypalStateHolder.get(stateName);

		stateProviderEmitter.emit('beforeResetState', {
			domApi: domApi,
			content: content,
			state: state,
			parameters: parameters
		});

		activeEmitters[stateName].emit('destroy');
		delete activeEmitters[stateName];

		return resetDom({
			domApi: domApi,
			content: content,
			template: state.template,
			parameters: parameters
		}).then(function (newDomApi) {
			if (newDomApi) {
				activeDomApis[stateName] = newDomApi;
			}

			stateProviderEmitter.emit('afterResetState', {
				domApi: activeDomApis[stateName],
				content: content,
				state: state,
				parameters: parameters
			});
		});
	}

	function getChildElementForStateName(stateName) {
		return new Promise(function (resolve) {
			var parent = prototypalStateHolder.getParent(stateName);
			if (parent) {
				var parentDomApi = activeDomApis[parent.name];
				resolve(getDomChild(parentDomApi));
			} else {
				resolve(rootElement);
			}
		});
	}

	function renderStateName(parameters, stateName) {
		return getChildElementForStateName(stateName).then(function (element) {
			var state = prototypalStateHolder.get(stateName);
			var content = getContentObject(activeStateResolveContent, stateName);

			stateProviderEmitter.emit('beforeCreateState', {
				state: state,
				content: content,
				parameters: parameters
			});

			return renderDom({
				template: state.template,
				element: element,
				content: content,
				parameters: parameters
			}).then(function (domApi) {
				activeDomApis[stateName] = domApi;
				stateProviderEmitter.emit('afterCreateState', {
					state: state,
					domApi: domApi,
					content: content,
					parameters: parameters
				});
				return domApi;
			});
		});
	}

	function renderAll(stateNames, parameters) {
		return promiseMapSeries(stateNames, function (stateName) {
			return renderStateName(parameters, stateName);
		});
	}

	function onRouteChange(state, parameters) {
		try {
			var finalDestinationStateName = prototypalStateHolder.applyDefaultChildStates(state.name);

			if (finalDestinationStateName === state.name) {
				emitEventAndAttemptStateChange(finalDestinationStateName, parameters);
			} else {
				// There are default child states that need to be applied

				var theRouteWeNeedToEndUpAt = makePath(finalDestinationStateName, parameters);
				var currentRoute = router.location.get();

				if (theRouteWeNeedToEndUpAt === currentRoute) {
					// the child state has the same route as the current one, just start navigating there
					emitEventAndAttemptStateChange(finalDestinationStateName, parameters);
				} else {
					// change the url to match the full default child state route
					stateProviderEmitter.go(finalDestinationStateName, parameters, { replace: true });
				}
			}
		} catch (err) {
			handleError('stateError', err);
		}
	}

	function addState(state) {
		if (typeof state === 'undefined') {
			throw new Error('Expected \'state\' to be passed in.');
		} else if (typeof state.name === 'undefined') {
			throw new Error('Expected the \'name\' option to be passed in.');
		} else if (typeof state.template === 'undefined') {
			throw new Error('Expected the \'template\' option to be passed in.');
		}
		Object.keys(state).filter(function (key) {
			return expectedPropertiesOfAddState.indexOf(key) === -1;
		}).forEach(function (key) {
			console.warn('Unexpected property passed to addState:', key);
		});

		prototypalStateHolder.add(state.name, state);

		var route = prototypalStateHolder.buildFullStateRoute(state.name);

		router.add(route, function (parameters) {
			return onRouteChange(state, parameters);
		});
	}

	function getStatesToResolve(stateChanges) {
		return stateChanges.change.concat(stateChanges.create).map(prototypalStateHolder.get);
	}

	function emitEventAndAttemptStateChange(newStateName, parameters) {
		stateProviderEmitter.emit('stateChangeAttempt', function stateGo(transition) {
			attemptStateChange(newStateName, parameters, transition);
		});
	}

	function attemptStateChange(newStateName, parameters, transition) {
		function ifNotCancelled(fn) {
			return function () {
				if (transition.cancelled) {
					var err = new Error('The transition to ' + newStateName + ' was cancelled');
					err.wasCancelledBySomeoneElse = true;
					throw err;
				} else {
					return fn.apply(undefined, arguments);
				}
			};
		}

		return promiseMe(prototypalStateHolder.guaranteeAllStatesExist, newStateName).then(function applyDefaultParameters() {
			var state = prototypalStateHolder.get(newStateName);
			var defaultParams = state.defaultParameters || state.defaultQuerystringParameters || {};
			var needToApplyDefaults = Object.keys(defaultParams).some(function missingParameterValue(param) {
				return typeof parameters[param] === 'undefined';
			});

			if (needToApplyDefaults) {
				throw redirector(newStateName, extend(defaultParams, parameters));
			}
			return state;
		}).then(ifNotCancelled(function (state) {
			stateProviderEmitter.emit('stateChangeStart', state, parameters, stateNameToArrayofStates(state.name));
			lastStateStartedActivating.set(state.name, parameters);
		})).then(function getStateChanges() {
			var stateComparisonResults = compareStartAndEndStates({
				original: lastCompletelyLoadedState.get(),
				destination: {
					name: newStateName,
					parameters: parameters
				}
			});
			return stateChangeLogic(stateComparisonResults); // { destroy, change, create }
		}).then(ifNotCancelled(function resolveDestroyAndActivateStates(stateChanges) {
			return resolveStates(getStatesToResolve(stateChanges), extend(parameters)).catch(function onResolveError(e) {
				e.stateChangeError = true;
				throw e;
			}).then(ifNotCancelled(function destroyAndActivate(stateResolveResultsObject) {
				transition.cancellable = false;

				var activateAll = function activateAll() {
					return activateStates(stateChanges.change.concat(stateChanges.create));
				};

				activeStateResolveContent = extend(activeStateResolveContent, stateResolveResultsObject);

				return promiseMapSeries(reverse(stateChanges.destroy), destroyStateName).then(function () {
					return promiseMapSeries(reverse(stateChanges.change), function (stateName) {
						return resetStateName(extend(parameters), stateName);
					});
				}).then(function () {
					return renderAll(stateChanges.create, extend(parameters)).then(activateAll);
				});
			}));

			function activateStates(stateNames) {
				return stateNames.map(prototypalStateHolder.get).forEach(function (state) {
					var emitter = new eventemitter3();
					var context = Object.create(emitter);
					context.domApi = activeDomApis[state.name];
					context.data = state.data;
					context.parameters = parameters;
					context.content = getContentObject(activeStateResolveContent, state.name);
					activeEmitters[state.name] = emitter;

					try {
						state.activate && state.activate(context);
					} catch (e) {
						isoNextTick(function () {
							throw e;
						});
					}
				});
			}
		})).then(function stateChangeComplete() {
			lastCompletelyLoadedState.set(newStateName, parameters);
			try {
				stateProviderEmitter.emit('stateChangeEnd', prototypalStateHolder.get(newStateName), parameters, stateNameToArrayofStates(newStateName));
			} catch (e) {
				handleError('stateError', e);
			}
		}).catch(ifNotCancelled(function handleStateChangeError(err) {
			if (err && err.redirectTo) {
				stateProviderEmitter.emit('stateChangeCancelled', err);
				return stateProviderEmitter.go(err.redirectTo.name, err.redirectTo.params, { replace: true });
			} else if (err) {
				handleError('stateChangeError', err);
			}
		})).catch(function handleCancellation(err) {
			if (err && err.wasCancelledBySomeoneElse) {
				// we don't care, the state transition manager has already emitted the stateChangeCancelled for us
			} else {
				throw new Error('This probably shouldn\'t happen, maybe file an issue or something ' + err);
			}
		});
	}

	function makePath(stateName, parameters, options) {
		function getGuaranteedPreviousState() {
			if (!lastStateStartedActivating.get().name) {
				throw new Error('makePath required a previous state to exist, and none was found');
			}
			return lastStateStartedActivating.get();
		}
		if (options && options.inherit) {
			parameters = extend(getGuaranteedPreviousState().parameters, parameters);
		}

		var destinationStateName = stateName === null ? getGuaranteedPreviousState().name : stateName;

		var destinationState = prototypalStateHolder.get(destinationStateName) || {};
		var defaultParams = destinationState.defaultParameters || destinationState.defaultQuerystringParameters;

		parameters = extend(defaultParams, parameters);

		prototypalStateHolder.guaranteeAllStatesExist(destinationStateName);
		var route = prototypalStateHolder.buildFullStateRoute(destinationStateName);
		return pagePathBuilder(route, parameters || {});
	}

	var defaultOptions = {
		replace: false
	};

	stateProviderEmitter.addState = addState;
	stateProviderEmitter.go = function (newStateName, parameters, options) {
		options = extend(defaultOptions, options);
		var goFunction = options.replace ? router.replace : router.go;

		return promiseMe(makePath, newStateName, parameters, options).then(goFunction, function (err) {
			return handleError('stateChangeError', err);
		});
	};
	stateProviderEmitter.evaluateCurrentRoute = function (defaultState, defaultParams) {
		return promiseMe(makePath, defaultState, defaultParams).then(function (defaultPath) {
			router.evaluateCurrent(defaultPath);
		}).catch(function (err) {
			return handleError('stateError', err);
		});
	};
	stateProviderEmitter.makePath = function (stateName, parameters, options) {
		return pathPrefix + makePath(stateName, parameters, options);
	};
	stateProviderEmitter.getActiveState = function () {
		return lastCompletelyLoadedState.get();
	};
	stateProviderEmitter.stateIsActive = function (stateName) {
		var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

		var currentState$$1 = lastCompletelyLoadedState.get();
		var stateNameMatches = currentState$$1.name === stateName || currentState$$1.name.indexOf(stateName + '.') === 0;
		var parametersWereNotPassedIn = !parameters;

		return stateNameMatches && (parametersWereNotPassedIn || Object.keys(parameters).every(function (key) {
			return parameters[key] === currentState$$1.parameters[key];
		}));
	};

	var renderer = makeRenderer(stateProviderEmitter);

	destroyDom = thenDenodeify(renderer.destroy);
	getDomChild = thenDenodeify(renderer.getChildElement);
	renderDom = thenDenodeify(renderer.render);
	resetDom = thenDenodeify(renderer.reset);

	return stateProviderEmitter;
};

function getContentObject(stateResolveResultsObject, stateName) {
	var allPossibleResolvedStateNames = stateStringParser(stateName);

	return allPossibleResolvedStateNames.filter(function (stateName) {
		return stateResolveResultsObject[stateName];
	}).reduce(function (obj, stateName) {
		return extend(obj, stateResolveResultsObject[stateName]);
	}, {});
}

function redirector(newStateName, parameters) {
	return {
		redirectTo: {
			name: newStateName,
			params: parameters
		}
	};
}

// { [stateName]: resolveResult }
function resolveStates(states, parameters) {
	var statesWithResolveFunctions = states.filter(isFunction('resolve'));
	var stateNamesWithResolveFunctions = statesWithResolveFunctions.map(getProperty('name'));

	var resolves = Promise.all(statesWithResolveFunctions.map(function (state) {
		return new Promise(function (resolve, reject) {
			var resolveCb = function resolveCb(err, content) {
				return err ? reject(err) : resolve(content);
			};

			resolveCb.redirect = function (newStateName, parameters) {
				reject(redirector(newStateName, parameters));
			};

			var res = state.resolve(state.data, parameters, resolveCb);
			if (isThenable(res)) {
				resolve(res);
			}
		});
	}));

	return resolves.then(function (resolveResults) {
		return combineArrays({
			stateName: stateNamesWithResolveFunctions,
			resolveResult: resolveResults
		}).reduce(function (obj, result) {
			obj[result.stateName] = result.resolveResult;
			return obj;
		}, {});
	});
}

module.exports = abstractStateRouter;


},{"combine-arrays":18,"eventemitter3":20,"hash-brown-router":23,"iso-next-tick":25,"page-path-builder":29,"path-to-regexp-with-reversible-keys":31,"then-denodeify":37}],15:[function(require,module,exports){
(function (process){
module.exports = function all(o, cb) {
	var responded = false
	var zalgoIsAtTheDoor = true
	var running = 0
	var results = {}
	var errorResponse = null

	if (!o || typeof o !== 'object' || Array.isArray(o)) {
		throw new Error('async-all requires you to pass in an object!')
	}

	function respond() {
		function callCallback() {
			if (typeof cb === 'function') {
				if (errorResponse) {
					cb(errorResponse)
				} else {
					cb(null, results)
				}
			}
		}

		if (zalgoIsAtTheDoor) {
			process.nextTick(callCallback)
		} else {
			callCallback()
		}
	}

	function respondIfItMakesSense() {
		if (running === 0 && !responded) {
			respond()
			responded = true
		}
	}

	Object.keys(o).forEach(function(key) {
		var receivedResponse = false
		if (typeof o[key] === 'function') {
			running++
			o[key](function(err, value) {
				if (!receivedResponse) {
					receivedResponse = true
					running--
					if (!errorResponse) {
						if (err) {
							errorResponse = err
						} else {
							results[key] = value
						}
					}
					respondIfItMakesSense()
				}
			})
		} else {
			results[key] = o[key]
		}
	})

	respondIfItMakesSense()
	zalgoIsAtTheDoor = false
}

}).call(this,require('_process'))
},{"_process":17}],16:[function(require,module,exports){
const keyMaster = require(`key-master`)

const getPropertyValuesInOrder = o => Object.getOwnPropertyNames(o).map(key => o[key])
const assertType = (name, value, expectedType) => {
	const actualType = typeof value
	if (actualType !== expectedType) {
		throw new Error(`Expected ${ name } to be ${ expectedType } but it was ${ actualType }`)
	}
}

const freshMap = () => keyMaster(() => Object.create(null))

module.exports = function createEmitter(emitter = Object.create(null)) {
	let eventsToListeners = freshMap()

	emitter.on = (event, listener) => {
		assertType(`event`, event, `string`)
		assertType(`listener`, listener, `function`)

		const id = Math.random().toString()
		const listeners = eventsToListeners.get(event)
		listeners[id] = listener

		return () => {
			delete listeners[id]
		}
	}

	emitter.once = (event, listener) => {
		assertType(`event`, event, `string`)
		assertType(`listener`, listener, `function`)

		const unsubscribe = emitter.on(event, (...args) => {
			listener(...args)
			unsubscribe()
		})

		return unsubscribe
	}

	emitter.emit = (event, ...args) => {
		assertType(`event`, event, `string`)

		const listeners = eventsToListeners.get(event)
		getPropertyValuesInOrder(listeners).forEach(listener => listener(...args))
	}

	emitter.removeAllListeners = () => {
		eventsToListeners = freshMap()
	}

	return emitter
}

},{"key-master":26}],17:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],18:[function(require,module,exports){
module.exports = function(obj) {
	var keys = Object.keys(obj)

	keys.forEach(function(key) {
		if (!Array.isArray(obj[key])) {
			throw new Error(key + ' is not an array')
		}
	})

	var maxIndex = keys.reduce(function(maxSoFar, key) {
		var len = obj[key].length
		return maxSoFar > len ? maxSoFar : len
	}, 0)

	var output = []

	function getObject(index) {
		var o = {}
		keys.forEach(function(key) {
			o[key] = obj[key][index]
		})
		return o
	}

	for (var i = 0; i < maxIndex; ++i) {
		output.push(getObject(i))
	}

	return output
}

},{}],19:[function(require,module,exports){
/*!
  * domready (c) Dustin Diaz 2014 - License MIT
  */
!function (name, definition) {

  if (typeof module != 'undefined') module.exports = definition()
  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)
  else this[name] = definition()

}('domready', function () {

  var fns = [], listener
    , doc = document
    , hack = doc.documentElement.doScroll
    , domContentLoaded = 'DOMContentLoaded'
    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)


  if (!loaded)
  doc.addEventListener(domContentLoaded, listener = function () {
    doc.removeEventListener(domContentLoaded, listener)
    loaded = 1
    while (listener = fns.shift()) listener()
  })

  return function (fn) {
    loaded ? setTimeout(fn, 0) : fns.push(fn)
  }

});

},{}],20:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @api private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {Mixed} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @api private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @api public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @api public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Boolean} exists Only check if there are listeners.
 * @returns {Array|Boolean}
 * @api public
 */
EventEmitter.prototype.listeners = function listeners(event, exists) {
  var evt = prefix ? prefix + event : event
    , available = this._events[evt];

  if (exists) return !!available;
  if (!available) return [];
  if (available.fn) return [available.fn];

  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
    ee[i] = available[i].fn;
  }

  return ee;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @api public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Function} fn The listener function.
 * @param {Mixed} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @api public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  var listener = new EE(fn, context || this)
    , evt = prefix ? prefix + event : event;

  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
  else if (!this._events[evt].fn) this._events[evt].push(listener);
  else this._events[evt] = [this._events[evt], listener];

  return this;
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Function} fn The listener function.
 * @param {Mixed} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @api public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  var listener = new EE(fn, context || this, true)
    , evt = prefix ? prefix + event : event;

  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
  else if (!this._events[evt].fn) this._events[evt].push(listener);
  else this._events[evt] = [this._events[evt], listener];

  return this;
};

/**
 * Remove the listeners of a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {Mixed} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @api public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    if (--this._eventsCount === 0) this._events = new Events();
    else delete this._events[evt];
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
         listeners.fn === fn
      && (!once || listeners.once)
      && (!context || listeners.context === context)
    ) {
      if (--this._eventsCount === 0) this._events = new Events();
      else delete this._events[evt];
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
           listeners[i].fn !== fn
        || (once && !listeners[i].once)
        || (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else if (--this._eventsCount === 0) this._events = new Events();
    else delete this._events[evt];
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {String|Symbol} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @api public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) {
      if (--this._eventsCount === 0) this._events = new Events();
      else delete this._events[evt];
    }
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// This function doesn't apply anymore.
//
EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
  return this;
};

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
  module.exports = EventEmitter;
}

},{}],21:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],22:[function(require,module,exports){
var EventEmitter = require('eventemitter3')

module.exports = function HashLocation(window) {
	var emitter = new EventEmitter()
	var last = ''
	var needToDecode = getNeedToDecode()

	window.addEventListener('hashchange', function() {
		if (last !== emitter.get()) {
			last = emitter.get()
			emitter.emit('hashchange')
		}

	})

	function ifRouteIsDifferent(actualNavigateFunction) {
		return function navigate(newPath) {
			if (newPath !== last) {
				actualNavigateFunction(window, newPath)
			}
		}
	}

	emitter.go = ifRouteIsDifferent(go)
	emitter.replace = ifRouteIsDifferent(replace)
	emitter.get = get.bind(null, window, needToDecode)

	return emitter
}

function replace(window, newPath) {
	window.location.replace(everythingBeforeTheSlash(window.location.href) + '#' + newPath)
}

function everythingBeforeTheSlash(url) {
	var hashIndex = url.indexOf('#')
	return hashIndex === -1 ? url : url.substring(0, hashIndex)
}

function go(window, newPath) {
	window.location.hash = newPath
}

function get(window, needToDecode) {
	var hash = removeHashFromPath(window.location.hash)
	return needToDecode ? decodeURI(hash) : hash
}

function removeHashFromPath(path) {
	return (path && path[0] === '#') ? path.substr(1) : path
}

function getNeedToDecode() {
	var a = document.createElement('a')
	a.href = '#x x'
	return !/x x/.test(a.hash)
}

},{"eventemitter3":20}],23:[function(require,module,exports){
var pathToRegexp = require('path-to-regexp-with-reversible-keys')
var qs = require('query-string')
var xtend = require('xtend')
var browserHashLocation = require('./hash-location.js')
var EventEmitter = require('eventemitter3')

module.exports = function Router(opts, hashLocation) {
	var emitter = new EventEmitter()
	if (isHashLocation(opts)) {
		hashLocation = opts
		opts = null
	}

	opts = opts || {}

	if (!hashLocation) {
		hashLocation = browserHashLocation(window)
	}

	function onNotFound(path, queryStringParameters) {
		emitter.emit('not found', path, queryStringParameters)
	}

	var routes = []

	var onHashChange = evaluateCurrentPath.bind(null, routes, hashLocation, !!opts.reverse, onNotFound)

	hashLocation.on('hashchange', onHashChange)

	function stop() {
		hashLocation.removeListener('hashchange', onHashChange)
	}

	emitter.add = add.bind(null, routes)
	emitter.stop = stop
	emitter.evaluateCurrent = evaluateCurrentPathOrGoToDefault.bind(null, routes, hashLocation, !!opts.reverse, onNotFound)
	emitter.replace = hashLocation.replace
	emitter.go = hashLocation.go
	emitter.location = hashLocation

	return emitter
}

function evaluateCurrentPath(routes, hashLocation, reverse, onNotFound) {
	evaluatePath(routes, stripHashFragment(hashLocation.get()), reverse, onNotFound)
}

function getPathParts(path) {
	var chunks = path.split('?')
	return {
		path: chunks.shift(),
		queryString: qs.parse(chunks.join('')),
	}
}

function evaluatePath(routes, path, reverse, onNotFound) {
	var pathParts = getPathParts(path)
	path = pathParts.path
	var queryStringParameters = pathParts.queryString

	var matchingRoute = find((reverse ? reverseArray(routes) : routes), path)

	if (matchingRoute) {
		var regexResult = matchingRoute.exec(path)
		var routeParameters = makeParametersObjectFromRegexResult(matchingRoute.keys, regexResult)
		var params = xtend(queryStringParameters, routeParameters)
		matchingRoute.fn(params)
	} else {
		onNotFound(path, queryStringParameters)
	}
}

function reverseArray(ary) {
	return ary.slice().reverse()
}

function makeParametersObjectFromRegexResult(keys, regexResult) {
	return keys.reduce(function(memo, urlKey, index) {
		memo[urlKey.name] = regexResult[index + 1]
		return memo
	}, {})
}

function add(routes, routeString, routeFunction) {
	if (typeof routeFunction !== 'function') {
		throw new Error('The router add function must be passed a callback function')
	}
	var newRoute = pathToRegexp(routeString)
	newRoute.fn = routeFunction
	routes.push(newRoute)
}

function evaluateCurrentPathOrGoToDefault(routes, hashLocation, reverse, onNotFound, defaultPath) {
	var currentLocation = stripHashFragment(hashLocation.get())
	var canUseCurrentLocation = currentLocation && (currentLocation !== '/' || defaultPath === '/')

	if (canUseCurrentLocation) {
		var routesCopy = routes.slice()
		evaluateCurrentPath(routesCopy, hashLocation, reverse, onNotFound)
	} else {
		hashLocation.go(defaultPath)
	}
}

var urlWithoutHashFragmentRegex = /^([^#]*)(:?#.*)?$/
function stripHashFragment(url) {
	var match = url.match(urlWithoutHashFragmentRegex)
	return match ? match[1] : ''
}

function isHashLocation(hashLocation) {
	return hashLocation && hashLocation.go && hashLocation.replace && hashLocation.on
}

function find(aryOfRegexes, str) {
	for (var i = 0; i < aryOfRegexes.length; ++i) {
		if (str.match(aryOfRegexes[i])) {
			return aryOfRegexes[i]
		}
	}
}

},{"./hash-location.js":22,"eventemitter3":20,"path-to-regexp-with-reversible-keys":31,"query-string":32,"xtend":41}],24:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],25:[function(require,module,exports){
(function (setImmediate){
module.exports = function (fn) {
  typeof setImmediate === 'function' ?
    setImmediate(fn) :
    setTimeout(fn, 0)
}

}).call(this,require("timers").setImmediate)
},{"timers":38}],26:[function(require,module,exports){
module.exports = (factory, map = new Map()) => ({
	has: key => map.has(key),
	get: key => {
		if (!map.has(key) && typeof factory === 'function') {
			map.set(key, factory(key))
		}

		return map.get(key)
	},
	delete: key => map.delete(key),
	set: (key, value) => map.set(key, value),
	getUnderlyingDataStructure: () => map,
})

},{}],27:[function(require,module,exports){
'use strict';

// Customized for this use-case
const isObject = value =>
	typeof value === 'object' &&
	value !== null &&
	!(value instanceof RegExp) &&
	!(value instanceof Error) &&
	!(value instanceof Date);

const mapObject = (object, fn, options, isSeen = new WeakMap()) => {
	options = Object.assign({
		deep: false,
		target: {}
	}, options);

	if (isSeen.has(object)) {
		return isSeen.get(object);
	}

	isSeen.set(object, options.target);

	const {target} = options;
	delete options.target;

	const mapArray = array => array.map(x => isObject(x) ? mapObject(x, fn, options, isSeen) : x);
	if (Array.isArray(object)) {
		return mapArray(object);
	}

	/// TODO: Use `Object.entries()` when targeting Node.js 8
	for (const key of Object.keys(object)) {
		const value = object[key];
		let [newKey, newValue] = fn(key, value, object);

		if (options.deep && isObject(newValue)) {
			newValue = Array.isArray(newValue) ?
				mapArray(newValue) :
				mapObject(newValue, fn, options, isSeen);
		}

		target[newKey] = newValue;
	}

	return target;
};

module.exports = mapObject;

},{}],28:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],29:[function(require,module,exports){
var parser = require('./path-parser')
var stringifyQuerystring = require('query-string').stringify

module.exports = function(pathStr, parameters) {
	var parsed = typeof pathStr === 'string' ? parser(pathStr) : pathStr
	var allTokens = parsed.allTokens
	var regex = parsed.regex

	if (parameters) {
		var path = allTokens.map(function(bit) {
			if (bit.string) {
				return bit.string
			}

			var defined = typeof parameters[bit.name] !== 'undefined'
			if (!bit.optional && !defined) {
				throw new Error('Must supply argument ' + bit.name + ' for path ' + pathStr)
			}

			return defined ? (bit.delimiter + encodeURIComponent(parameters[bit.name])) : ''
		}).join('')

		if (!regex.test(path)) {
			throw new Error('Provided arguments do not match the original arguments')
		}

		return buildPathWithQuerystring(path, parameters, allTokens)
	} else {
		return parsed
	}
}

function buildPathWithQuerystring(path, parameters, tokenArray) {
	var parametersInQuerystring = getParametersWithoutMatchingToken(parameters, tokenArray)

	if (Object.keys(parametersInQuerystring).length === 0) {
		return path
	}

	return path + '?' + stringifyQuerystring(parametersInQuerystring)
}

function getParametersWithoutMatchingToken(parameters, tokenArray) {
	var tokenHash = tokenArray.reduce(function(memo, bit) {
		if (!bit.string) {
			memo[bit.name] = bit
		}
		return memo
	}, {})

	return Object.keys(parameters).filter(function(param) {
		return !tokenHash[param]
	}).reduce(function(newParameters, param) {
		newParameters[param] = parameters[param]
		return newParameters
	}, {})
}

},{"./path-parser":30,"query-string":32}],30:[function(require,module,exports){
// This file to be replaced with an official implementation maintained by
// the page.js crew if and when that becomes an option

var pathToRegexp = require('path-to-regexp-with-reversible-keys')

module.exports = function(pathString) {
	var parseResults = pathToRegexp(pathString)

	// The only reason I'm returning a new object instead of the results of the pathToRegexp
	// function is so that if the official implementation ends up returning an
	// allTokens-style array via some other mechanism, I may be able to change this file
	// without having to change the rest of the module in index.js
	return {
		regex: parseResults,
		allTokens: parseResults.allTokens
	}
}

},{"path-to-regexp-with-reversible-keys":31}],31:[function(require,module,exports){
var isArray = require('isarray');

/**
 * Expose `pathToRegexp`.
 */
module.exports = pathToRegexp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?"]
  // "/route(\\d+)" => [undefined, undefined, undefined, "\d+", undefined]
  '([\\/.])?(?:\\:(\\w+)(?:\\(((?:\\\\.|[^)])*)\\))?|\\(((?:\\\\.|[^)])*)\\))([+*?])?',
  // Match regexp special characters that are always escaped.
  '([.+*?=^!:${}()[\\]|\\/])'
].join('|'), 'g');

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {String} group
 * @return {String}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {RegExp} re
 * @param  {Array}  keys
 * @return {RegExp}
 */
function attachKeys (re, keys, allTokens) {
  re.keys = keys;
  re.allTokens = allTokens;
  return re;
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {String}
 */
function flags (options) {
  return options.sensitive ? '' : 'i';
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {RegExp} path
 * @param  {Array}  keys
 * @return {RegExp}
 */
function regexpToRegexp (path, keys, allTokens) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name:      i,
        delimiter: null,
        optional:  false,
        repeat:    false
      });
    }
  }

  return attachKeys(path, keys, allTokens);
}

/**
 * Transform an array into a regexp.
 *
 * @param  {Array}  path
 * @param  {Array}  keys
 * @param  {Object} options
 * @return {RegExp}
 */
function arrayToRegexp (path, keys, options, allTokens) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options, allTokens).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
  return attachKeys(regexp, keys, allTokens);
}

/**
 * Replace the specific tags with regexp strings.
 *
 * @param  {String} path
 * @param  {Array}  keys
 * @return {String}
 */
function replacePath (path, keys, allTokens) {
  var index = 0;
  var lastEndIndex = 0

  function addLastToken(lastToken) {
    if (lastEndIndex === 0 && lastToken[0] !== '/') {
      lastToken = '/' + lastToken
    }
    allTokens.push({
      string: lastToken
    });
  }


  function replace (match, escaped, prefix, key, capture, group, suffix, escape, offset) {
    if (escaped) {
      return escaped;
    }

    if (escape) {
      return '\\' + escape;
    }

    var repeat   = suffix === '+' || suffix === '*';
    var optional = suffix === '?' || suffix === '*';

    if (offset > lastEndIndex) {
      addLastToken(path.substring(lastEndIndex, offset));
    }

    lastEndIndex = offset + match.length;

    var newKey = {
      name:      key || index++,
      delimiter: prefix || '/',
      optional:  optional,
      repeat:    repeat
    }

    keys.push(newKey);
    allTokens.push(newKey);

    prefix = prefix ? ('\\' + prefix) : '';
    capture = escapeGroup(capture || group || '[^' + (prefix || '\\/') + ']+?');

    if (repeat) {
      capture = capture + '(?:' + prefix + capture + ')*';
    }

    if (optional) {
      return '(?:' + prefix + '(' + capture + '))?';
    }

    // Basic parameter support.
    return prefix + '(' + capture + ')';
  }

  var newPath = path.replace(PATH_REGEXP, replace);

  if (lastEndIndex < path.length) {
    addLastToken(path.substring(lastEndIndex))
  }

  return newPath;
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(String|RegExp|Array)} path
 * @param  {Array}                 [keys]
 * @param  {Object}                [options]
 * @return {RegExp}
 */
function pathToRegexp (path, keys, options, allTokens) {
  keys = keys || [];
  allTokens = allTokens || [];

  if (!isArray(keys)) {
    options = keys;
    keys = [];
  } else if (!options) {
    options = {};
  }

  if (path instanceof RegExp) {
    return regexpToRegexp(path, keys, options, allTokens);
  }

  if (isArray(path)) {
    return arrayToRegexp(path, keys, options, allTokens);
  }

  var strict = options.strict;
  var end = options.end !== false;
  var route = replacePath(path, keys, allTokens);
  var endsWithSlash = path.charAt(path.length - 1) === '/';

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\/(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithSlash ? '' : '(?=\\/|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys, allTokens);
}

},{"isarray":24}],32:[function(require,module,exports){
'use strict';
var strictUriEncode = require('strict-uri-encode');
var objectAssign = require('object-assign');

function encoderForArrayFormat(opts) {
	switch (opts.arrayFormat) {
		case 'index':
			return function (key, value, index) {
				return value === null ? [
					encode(key, opts),
					'[',
					index,
					']'
				].join('') : [
					encode(key, opts),
					'[',
					encode(index, opts),
					']=',
					encode(value, opts)
				].join('');
			};

		case 'bracket':
			return function (key, value) {
				return value === null ? encode(key, opts) : [
					encode(key, opts),
					'[]=',
					encode(value, opts)
				].join('');
			};

		default:
			return function (key, value) {
				return value === null ? encode(key, opts) : [
					encode(key, opts),
					'=',
					encode(value, opts)
				].join('');
			};
	}
}

function parserForArrayFormat(opts) {
	var result;

	switch (opts.arrayFormat) {
		case 'index':
			return function (key, value, accumulator) {
				result = /\[(\d*)\]$/.exec(key);

				key = key.replace(/\[\d*\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = {};
				}

				accumulator[key][result[1]] = value;
			};

		case 'bracket':
			return function (key, value, accumulator) {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				} else if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		default:
			return function (key, value, accumulator) {
				if (accumulator[key] === undefined) {
					accumulator[key] = value;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};
	}
}

function encode(value, opts) {
	if (opts.encode) {
		return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

function keysSorter(input) {
	if (Array.isArray(input)) {
		return input.sort();
	} else if (typeof input === 'object') {
		return keysSorter(Object.keys(input)).sort(function (a, b) {
			return Number(a) - Number(b);
		}).map(function (key) {
			return input[key];
		});
	}

	return input;
}

exports.extract = function (str) {
	return str.split('?')[1] || '';
};

exports.parse = function (str, opts) {
	opts = objectAssign({arrayFormat: 'none'}, opts);

	var formatter = parserForArrayFormat(opts);

	// Create an object with no prototype
	// https://github.com/sindresorhus/query-string/issues/47
	var ret = Object.create(null);

	if (typeof str !== 'string') {
		return ret;
	}

	str = str.trim().replace(/^(\?|#|&)/, '');

	if (!str) {
		return ret;
	}

	str.split('&').forEach(function (param) {
		var parts = param.replace(/\+/g, ' ').split('=');
		// Firefox (pre 40) decodes `%3D` to `=`
		// https://github.com/sindresorhus/query-string/pull/37
		var key = parts.shift();
		var val = parts.length > 0 ? parts.join('=') : undefined;

		// missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		val = val === undefined ? null : decodeURIComponent(val);

		formatter(decodeURIComponent(key), val, ret);
	});

	return Object.keys(ret).sort().reduce(function (result, key) {
		var val = ret[key];
		if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
			// Sort object keys, not values
			result[key] = keysSorter(val);
		} else {
			result[key] = val;
		}

		return result;
	}, Object.create(null));
};

exports.stringify = function (obj, opts) {
	var defaults = {
		encode: true,
		strict: true,
		arrayFormat: 'none'
	};

	opts = objectAssign(defaults, opts);

	var formatter = encoderForArrayFormat(opts);

	return obj ? Object.keys(obj).sort().map(function (key) {
		var val = obj[key];

		if (val === undefined) {
			return '';
		}

		if (val === null) {
			return encode(key, opts);
		}

		if (Array.isArray(val)) {
			var result = [];

			val.slice().forEach(function (val2) {
				if (val2 === undefined) {
					return;
				}

				result.push(formatter(key, val2, result.length));
			});

			return result.join('&');
		}

		return encode(key, opts) + '=' + encode(val, opts);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&') : '';
};

},{"object-assign":28,"strict-uri-encode":34}],33:[function(require,module,exports){
/**
 *
 * This function was taken from a stackoverflow answer:
 *
 * http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
 *
 * Many thanks to:
 *
 * Briguy37 (http://stackoverflow.com/users/508537/briguy37)
 * broofa (http://stackoverflow.com/users/109538/broofa)
 *
 */

module.exports = function() {
    var d = new Date().getTime();
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = (d + Math.random()*16)%16 | 0;
        d = Math.floor(d/16);
        return (c=='x' ? r : (r&0x3|0x8)).toString(16);
    });
};

},{}],34:[function(require,module,exports){
'use strict';
module.exports = function (str) {
	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	});
};

},{}],35:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var internal = require('./internal');



exports.onMount = internal.onMount;
exports.onDestroy = internal.onDestroy;
exports.beforeUpdate = internal.beforeUpdate;
exports.afterUpdate = internal.afterUpdate;
exports.setContext = internal.setContext;
exports.getContext = internal.getContext;
exports.tick = internal.tick;
exports.createEventDispatcher = internal.createEventDispatcher;

},{"./internal":36}],36:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function noop() {}

const identity = x => x;

function assign(tar, src) {
	for (const k in src) tar[k] = src[k];
	return tar;
}

function is_promise(value) {
	return value && typeof value.then === 'function';
}

function add_location(element, file, line, column, char) {
	element.__svelte_meta = {
		loc: { file, line, column, char }
	};
}

function run(fn) {
	return fn();
}

function blank_object() {
	return Object.create(null);
}

function run_all(fns) {
	fns.forEach(run);
}

function is_function(thing) {
	return typeof thing === 'function';
}

function safe_not_equal(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function not_equal(a, b) {
	return a != a ? b == b : a !== b;
}

function validate_store(store, name) {
	if (!store || typeof store.subscribe !== 'function') {
		throw new Error(`'${name}' is not a store with a 'subscribe' method`);
	}
}

function subscribe(component, store, callback) {
	component.$$.on_destroy.push(store.subscribe(callback));
}

function create_slot(definition, ctx, fn) {
	if (definition) {
		const slot_ctx = get_slot_context(definition, ctx, fn);
		return definition[0](slot_ctx);
	}
}

function get_slot_context(definition, ctx, fn) {
	return definition[1]
		? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {})))
		: ctx.$$scope.ctx;
}

function get_slot_changes(definition, ctx, changed, fn) {
	return definition[1]
		? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {})))
		: ctx.$$scope.changed || {};
}

function exclude_internal_props(props) {
	const result = {};
	for (const k in props) if (k[0] !== '$') result[k] = props[k];
	return result;
}

const tasks = new Set();
let running = false;

function run_tasks() {
	tasks.forEach(task => {
		if (!task[0](window.performance.now())) {
			tasks.delete(task);
			task[1]();
		}
	});

	running = tasks.size > 0;
	if (running) requestAnimationFrame(run_tasks);
}

function clear_loops() {
	// for testing...
	tasks.forEach(task => tasks.delete(task));
	running = false;
}

function loop(fn) {
	let task;

	if (!running) {
		running = true;
		requestAnimationFrame(run_tasks);
	}

	return {
		promise: new Promise(fulfil => {
			tasks.add(task = [fn, fulfil]);
		}),
		abort() {
			tasks.delete(task);
		}
	};
}

function append(target, node) {
	target.appendChild(node);
}

function insert(target, node, anchor) {
	target.insertBefore(node, anchor);
}

function detach(node) {
	node.parentNode.removeChild(node);
}

function detach_between(before, after) {
	while (before.nextSibling && before.nextSibling !== after) {
		before.parentNode.removeChild(before.nextSibling);
	}
}

function detach_before(after) {
	while (after.previousSibling) {
		after.parentNode.removeChild(after.previousSibling);
	}
}

function detach_after(before) {
	while (before.nextSibling) {
		before.parentNode.removeChild(before.nextSibling);
	}
}

function destroy_each(iterations, detaching) {
	for (let i = 0; i < iterations.length; i += 1) {
		if (iterations[i]) iterations[i].d(detaching);
	}
}

function element(name) {
	return document.createElement(name);
}

function svg_element(name) {
	return document.createElementNS('http://www.w3.org/2000/svg', name);
}

function text(data) {
	return document.createTextNode(data);
}

function space() {
	return text(' ');
}

function empty() {
	return text('');
}

function listen(node, event, handler, options) {
	node.addEventListener(event, handler, options);
	return () => node.removeEventListener(event, handler, options);
}

function prevent_default(fn) {
	return function(event) {
		event.preventDefault();
		return fn.call(this, event);
	};
}

function stop_propagation(fn) {
	return function(event) {
		event.stopPropagation();
		return fn.call(this, event);
	};
}

function attr(node, attribute, value) {
	if (value == null) node.removeAttribute(attribute);
	else node.setAttribute(attribute, value);
}

function set_attributes(node, attributes) {
	for (const key in attributes) {
		if (key === 'style') {
			node.style.cssText = attributes[key];
		} else if (key in node) {
			node[key] = attributes[key];
		} else {
			attr(node, key, attributes[key]);
		}
	}
}

function set_custom_element_data(node, prop, value) {
	if (prop in node) {
		node[prop] = value;
	} else {
		attr(node, prop, value);
	}
}

function xlink_attr(node, attribute, value) {
	node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
}

function get_binding_group_value(group) {
	const value = [];
	for (let i = 0; i < group.length; i += 1) {
		if (group[i].checked) value.push(group[i].__value);
	}
	return value;
}

function to_number(value) {
	return value === '' ? undefined : +value;
}

function time_ranges_to_array(ranges) {
	const array = [];
	for (let i = 0; i < ranges.length; i += 1) {
		array.push({ start: ranges.start(i), end: ranges.end(i) });
	}
	return array;
}

function children(element) {
	return Array.from(element.childNodes);
}

function claim_element(nodes, name, attributes, svg) {
	for (let i = 0; i < nodes.length; i += 1) {
		const node = nodes[i];
		if (node.nodeName === name) {
			for (let j = 0; j < node.attributes.length; j += 1) {
				const attribute = node.attributes[j];
				if (!attributes[attribute.name]) node.removeAttribute(attribute.name);
			}
			return nodes.splice(i, 1)[0]; // TODO strip unwanted attributes
		}
	}

	return svg ? svg_element(name) : element(name);
}

function claim_text(nodes, data) {
	for (let i = 0; i < nodes.length; i += 1) {
		const node = nodes[i];
		if (node.nodeType === 3) {
			node.data = data;
			return nodes.splice(i, 1)[0];
		}
	}

	return text(data);
}

function set_data(text, data) {
	data = '' + data;
	if (text.data !== data) text.data = data;
}

function set_input_type(input, type) {
	try {
		input.type = type;
	} catch (e) {
		// do nothing
	}
}

function set_style(node, key, value) {
	node.style.setProperty(key, value);
}

function select_option(select, value) {
	for (let i = 0; i < select.options.length; i += 1) {
		const option = select.options[i];

		if (option.__value === value) {
			option.selected = true;
			return;
		}
	}
}

function select_options(select, value) {
	for (let i = 0; i < select.options.length; i += 1) {
		const option = select.options[i];
		option.selected = ~value.indexOf(option.__value);
	}
}

function select_value(select) {
	const selected_option = select.querySelector(':checked') || select.options[0];
	return selected_option && selected_option.__value;
}

function select_multiple_value(select) {
	return [].map.call(select.querySelectorAll(':checked'), option => option.__value);
}

function add_resize_listener(element, fn) {
	if (getComputedStyle(element).position === 'static') {
		element.style.position = 'relative';
	}

	const object = document.createElement('object');
	object.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;');
	object.type = 'text/html';

	let win;

	object.onload = () => {
		win = object.contentDocument.defaultView;
		win.addEventListener('resize', fn);
	};

	if (/Trident/.test(navigator.userAgent)) {
		element.appendChild(object);
		object.data = 'about:blank';
	} else {
		object.data = 'about:blank';
		element.appendChild(object);
	}

	return {
		cancel: () => {
			win && win.removeEventListener && win.removeEventListener('resize', fn);
			element.removeChild(object);
		}
	};
}

function toggle_class(element, name, toggle) {
	element.classList[toggle ? 'add' : 'remove'](name);
}

function custom_event(type, detail) {
	const e = document.createEvent('CustomEvent');
	e.initCustomEvent(type, false, false, detail);
	return e;
}

let stylesheet;
let active = 0;
let current_rules = {};

// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
	let hash = 5381;
	let i = str.length;

	while (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
	return hash >>> 0;
}

function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
	const step = 16.666 / duration;
	let keyframes = '{\n';

	for (let p = 0; p <= 1; p += step) {
		const t = a + (b - a) * ease(p);
		keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
	}

	const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
	const name = `__svelte_${hash(rule)}_${uid}`;

	if (!current_rules[name]) {
		if (!stylesheet) {
			const style = element('style');
			document.head.appendChild(style);
			stylesheet = style.sheet;
		}

		current_rules[name] = true;
		stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
	}

	const animation = node.style.animation || '';
	node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;

	active += 1;
	return name;
}

function delete_rule(node, name) {
	node.style.animation = (node.style.animation || '')
		.split(', ')
		.filter(name
			? anim => anim.indexOf(name) < 0 // remove specific animation
			: anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
		)
		.join(', ');

	if (name && !--active) clear_rules();
}

function clear_rules() {
	requestAnimationFrame(() => {
		if (active) return;
		let i = stylesheet.cssRules.length;
		while (i--) stylesheet.deleteRule(i);
		current_rules = {};
	});
}

function create_animation(node, from, fn, params) {
	if (!from) return noop;

	const to = node.getBoundingClientRect();
	if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom) return noop;

	const {
		delay = 0,
		duration = 300,
		easing = identity,
		start: start_time = window.performance.now() + delay,
		end = start_time + duration,
		tick = noop,
		css
	} = fn(node, { from, to }, params);

	let running = true;
	let started = false;
	let name;

	const css_text = node.style.cssText;

	function start() {
		if (css) {
			if (delay) node.style.cssText = css_text; // TODO create delayed animation instead?
			name = create_rule(node, 0, 1, duration, 0, easing, css);
		}

		started = true;
	}

	function stop() {
		if (css) delete_rule(node, name);
		running = false;
	}

	loop(now => {
		if (!started && now >= start_time) {
			start();
		}

		if (started && now >= end) {
			tick(1, 0);
			stop();
		}

		if (!running) {
			return false;
		}

		if (started) {
			const p = now - start_time;
			const t = 0 + 1 * easing(p / duration);
			tick(t, 1 - t);
		}

		return true;
	});

	if (delay) {
		if (css) node.style.cssText += css(0, 1);
	} else {
		start();
	}

	tick(0, 1);

	return stop;
}

function fix_position(node) {
	const style = getComputedStyle(node);

	if (style.position !== 'absolute' && style.position !== 'fixed') {
		const { width, height } = style;
		const a = node.getBoundingClientRect();
		node.style.position = 'absolute';
		node.style.width = width;
		node.style.height = height;
		const b = node.getBoundingClientRect();

		if (a.left !== b.left || a.top !== b.top) {
			const style = getComputedStyle(node);
			const transform = style.transform === 'none' ? '' : style.transform;

			node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
		}
	}
}

function set_current_component(component) {
	exports.current_component = component;
}

function get_current_component() {
	if (!exports.current_component) throw new Error(`Function called outside component initialization`);
	return exports.current_component;
}

function beforeUpdate(fn) {
	get_current_component().$$.before_render.push(fn);
}

function onMount(fn) {
	get_current_component().$$.on_mount.push(fn);
}

function afterUpdate(fn) {
	get_current_component().$$.after_render.push(fn);
}

function onDestroy(fn) {
	get_current_component().$$.on_destroy.push(fn);
}

function createEventDispatcher() {
	const component = exports.current_component;

	return (type, detail) => {
		const callbacks = component.$$.callbacks[type];

		if (callbacks) {
			// TODO are there situations where events could be dispatched
			// in a server (non-DOM) environment?
			const event = custom_event(type, detail);
			callbacks.slice().forEach(fn => {
				fn.call(component, event);
			});
		}
	};
}

function setContext(key, context) {
	get_current_component().$$.context.set(key, context);
}

function getContext(key) {
	return get_current_component().$$.context.get(key);
}

// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
	const callbacks = component.$$.callbacks[event.type];

	if (callbacks) {
		callbacks.slice().forEach(fn => fn(event));
	}
}

const dirty_components = [];
const intros = { enabled: false };

let update_promise;
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];

function schedule_update() {
	if (!update_promise) {
		update_promise = Promise.resolve();
		update_promise.then(flush);
	}
}

function tick() {
	schedule_update();
	return update_promise;
}

function add_binding_callback(fn) {
	binding_callbacks.push(fn);
}

function add_render_callback(fn) {
	render_callbacks.push(fn);
}

function add_flush_callback(fn) {
	flush_callbacks.push(fn);
}

function flush() {
	const seen_callbacks = new Set();

	do {
		// first, call beforeUpdate functions
		// and update components
		while (dirty_components.length) {
			const component = dirty_components.shift();
			set_current_component(component);
			update(component.$$);
		}

		while (binding_callbacks.length) binding_callbacks.shift()();

		// then, once components are updated, call
		// afterUpdate functions. This may cause
		// subsequent updates...
		while (render_callbacks.length) {
			const callback = render_callbacks.pop();
			if (!seen_callbacks.has(callback)) {
				callback();

				// ...so guard against infinite loops
				seen_callbacks.add(callback);
			}
		}
	} while (dirty_components.length);

	while (flush_callbacks.length) {
		flush_callbacks.pop()();
	}

	update_promise = null;
}

function update($$) {
	if ($$.fragment) {
		$$.update($$.dirty);
		run_all($$.before_render);
		$$.fragment.p($$.dirty, $$.ctx);
		$$.dirty = null;

		$$.after_render.forEach(add_render_callback);
	}
}

let promise;

function wait() {
	if (!promise) {
		promise = Promise.resolve();
		promise.then(() => {
			promise = null;
		});
	}

	return promise;
}

function dispatch(node, direction, kind) {
	node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}

let outros;

function group_outros() {
	outros = {
		remaining: 0,
		callbacks: []
	};
}

function check_outros() {
	if (!outros.remaining) {
		run_all(outros.callbacks);
	}
}

function on_outro(callback) {
	outros.callbacks.push(callback);
}

function create_in_transition(node, fn, params) {
	let config = fn(node, params);
	let running = false;
	let animation_name;
	let task;
	let uid = 0;

	function cleanup() {
		if (animation_name) delete_rule(node, animation_name);
	}

	function go() {
		const {
			delay = 0,
			duration = 300,
			easing = identity,
			tick: tick$$1 = noop,
			css
		} = config;

		if (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
		tick$$1(0, 1);

		const start_time = window.performance.now() + delay;
		const end_time = start_time + duration;

		if (task) task.abort();
		running = true;

		task = loop(now => {
			if (running) {
				if (now >= end_time) {
					tick$$1(1, 0);
					cleanup();
					return running = false;
				}

				if (now >= start_time) {
					const t = easing((now - start_time) / duration);
					tick$$1(t, 1 - t);
				}
			}

			return running;
		});
	}

	let started = false;

	return {
		start() {
			if (started) return;

			delete_rule(node);

			if (typeof config === 'function') {
				config = config();
				wait().then(go);
			} else {
				go();
			}
		},

		invalidate() {
			started = false;
		},

		end() {
			if (running) {
				cleanup();
				running = false;
			}
		}
	};
}

function create_out_transition(node, fn, params) {
	let config = fn(node, params);
	let running = true;
	let animation_name;

	const group = outros;

	group.remaining += 1;

	function go() {
		const {
			delay = 0,
			duration = 300,
			easing = identity,
			tick: tick$$1 = noop,
			css
		} = config;

		if (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);

		const start_time = window.performance.now() + delay;
		const end_time = start_time + duration;

		loop(now => {
			if (running) {
				if (now >= end_time) {
					tick$$1(0, 1);

					if (!--group.remaining) {
						// this will result in `end()` being called,
						// so we don't need to clean up here
						run_all(group.callbacks);
					}

					return false;
				}

				if (now >= start_time) {
					const t = easing((now - start_time) / duration);
					tick$$1(1 - t, t);
				}
			}

			return running;
		});
	}

	if (typeof config === 'function') {
		wait().then(() => {
			config = config();
			go();
		});
	} else {
		go();
	}

	return {
		end(reset) {
			if (reset && config.tick) {
				config.tick(1, 0);
			}

			if (running) {
				if (animation_name) delete_rule(node, animation_name);
				running = false;
			}
		}
	};
}

function create_bidirectional_transition(node, fn, params, intro) {
	let config = fn(node, params);

	let t = intro ? 0 : 1;

	let running_program = null;
	let pending_program = null;
	let animation_name = null;

	function clear_animation() {
		if (animation_name) delete_rule(node, animation_name);
	}

	function init(program, duration) {
		const d = program.b - t;
		duration *= Math.abs(d);

		return {
			a: t,
			b: program.b,
			d,
			duration,
			start: program.start,
			end: program.start + duration,
			group: program.group
		};
	}

	function go(b) {
		const {
			delay = 0,
			duration = 300,
			easing = identity,
			tick: tick$$1 = noop,
			css
		} = config;

		const program = {
			start: window.performance.now() + delay,
			b
		};

		if (!b) {
			program.group = outros;
			outros.remaining += 1;
		}

		if (running_program) {
			pending_program = program;
		} else {
			// if this is an intro, and there's a delay, we need to do
			// an initial tick and/or apply CSS animation immediately
			if (css) {
				clear_animation();
				animation_name = create_rule(node, t, b, duration, delay, easing, css);
			}

			if (b) tick$$1(0, 1);

			running_program = init(program, duration);
			add_render_callback(() => dispatch(node, b, 'start'));

			loop(now => {
				if (pending_program && now > pending_program.start) {
					running_program = init(pending_program, duration);
					pending_program = null;

					dispatch(node, running_program.b, 'start');

					if (css) {
						clear_animation();
						animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
					}
				}

				if (running_program) {
					if (now >= running_program.end) {
						tick$$1(t = running_program.b, 1 - t);
						dispatch(node, running_program.b, 'end');

						if (!pending_program) {
							// we're done
							if (running_program.b) {
								// intro — we can tidy up immediately
								clear_animation();
							} else {
								// outro — needs to be coordinated
								if (!--running_program.group.remaining) run_all(running_program.group.callbacks);
							}
						}

						running_program = null;
					}

					else if (now >= running_program.start) {
						const p = now - running_program.start;
						t = running_program.a + running_program.d * easing(p / running_program.duration);
						tick$$1(t, 1 - t);
					}
				}

				return !!(running_program || pending_program);
			});
		}
	}

	return {
		run(b) {
			if (typeof config === 'function') {
				wait().then(() => {
					config = config();
					go(b);
				});
			} else {
				go(b);
			}
		},

		end() {
			clear_animation();
			running_program = pending_program = null;
		}
	};
}

function handle_promise(promise, info) {
	const token = info.token = {};

	function update(type, index, key, value) {
		if (info.token !== token) return;

		info.resolved = key && { [key]: value };

		const child_ctx = assign(assign({}, info.ctx), info.resolved);
		const block = type && (info.current = type)(child_ctx);

		if (info.block) {
			if (info.blocks) {
				info.blocks.forEach((block, i) => {
					if (i !== index && block) {
						group_outros();
						on_outro(() => {
							block.d(1);
							info.blocks[i] = null;
						});
						block.o(1);
						check_outros();
					}
				});
			} else {
				info.block.d(1);
			}

			block.c();
			if (block.i) block.i(1);
			block.m(info.mount(), info.anchor);

			flush();
		}

		info.block = block;
		if (info.blocks) info.blocks[index] = block;
	}

	if (is_promise(promise)) {
		promise.then(value => {
			update(info.then, 1, info.value, value);
		}, error => {
			update(info.catch, 2, info.error, error);
		});

		// if we previously had a then/catch block, destroy it
		if (info.current !== info.pending) {
			update(info.pending, 0);
			return true;
		}
	} else {
		if (info.current !== info.then) {
			update(info.then, 1, info.value, promise);
			return true;
		}

		info.resolved = { [info.value]: promise };
	}
}

function destroy_block(block, lookup) {
	block.d(1);
	lookup.delete(block.key);
}

function outro_and_destroy_block(block, lookup) {
	on_outro(() => {
		destroy_block(block, lookup);
	});

	block.o(1);
}

function fix_and_outro_and_destroy_block(block, lookup) {
	block.f();
	outro_and_destroy_block(block, lookup);
}

function update_keyed_each(old_blocks, changed, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
	let o = old_blocks.length;
	let n = list.length;

	let i = o;
	const old_indexes = {};
	while (i--) old_indexes[old_blocks[i].key] = i;

	const new_blocks = [];
	const new_lookup = new Map();
	const deltas = new Map();

	i = n;
	while (i--) {
		const child_ctx = get_context(ctx, list, i);
		const key = get_key(child_ctx);
		let block = lookup.get(key);

		if (!block) {
			block = create_each_block(key, child_ctx);
			block.c();
		} else if (dynamic) {
			block.p(changed, child_ctx);
		}

		new_lookup.set(key, new_blocks[i] = block);

		if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));
	}

	const will_move = new Set();
	const did_move = new Set();

	function insert(block) {
		if (block.i) block.i(1);
		block.m(node, next);
		lookup.set(block.key, block);
		next = block.first;
		n--;
	}

	while (o && n) {
		const new_block = new_blocks[n - 1];
		const old_block = old_blocks[o - 1];
		const new_key = new_block.key;
		const old_key = old_block.key;

		if (new_block === old_block) {
			// do nothing
			next = new_block.first;
			o--;
			n--;
		}

		else if (!new_lookup.has(old_key)) {
			// remove old block
			destroy(old_block, lookup);
			o--;
		}

		else if (!lookup.has(new_key) || will_move.has(new_key)) {
			insert(new_block);
		}

		else if (did_move.has(old_key)) {
			o--;

		} else if (deltas.get(new_key) > deltas.get(old_key)) {
			did_move.add(new_key);
			insert(new_block);

		} else {
			will_move.add(old_key);
			o--;
		}
	}

	while (o--) {
		const old_block = old_blocks[o];
		if (!new_lookup.has(old_block.key)) destroy(old_block, lookup);
	}

	while (n) insert(new_blocks[n - 1]);

	return new_blocks;
}

function measure(blocks) {
	const rects = {};
	let i = blocks.length;
	while (i--) rects[blocks[i].key] = blocks[i].node.getBoundingClientRect();
	return rects;
}

function get_spread_update(levels, updates) {
	const update = {};

	const to_null_out = {};
	const accounted_for = {};

	let i = levels.length;
	while (i--) {
		const o = levels[i];
		const n = updates[i];

		if (n) {
			for (const key in o) {
				if (!(key in n)) to_null_out[key] = 1;
			}

			for (const key in n) {
				if (!accounted_for[key]) {
					update[key] = n[key];
					accounted_for[key] = 1;
				}
			}

			levels[i] = n;
		} else {
			for (const key in o) {
				accounted_for[key] = 1;
			}
		}
	}

	for (const key in to_null_out) {
		if (!(key in update)) update[key] = undefined;
	}

	return update;
}

const invalid_attribute_name_character = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
// https://infra.spec.whatwg.org/#noncharacter

function spread(args) {
	const attributes = Object.assign({}, ...args);
	let str = '';

	Object.keys(attributes).forEach(name => {
		if (invalid_attribute_name_character.test(name)) return;

		const value = attributes[name];
		if (value === undefined) return;
		if (value === true) str += " " + name;

		const escaped = String(value)
			.replace(/"/g, '&#34;')
			.replace(/'/g, '&#39;');

		str += " " + name + "=" + JSON.stringify(escaped);
	});

	return str;
}

const escaped = {
	'"': '&quot;',
	"'": '&#39;',
	'&': '&amp;',
	'<': '&lt;',
	'>': '&gt;'
};

function escape(html) {
	return String(html).replace(/["'&<>]/g, match => escaped[match]);
}

function each(items, fn) {
	let str = '';
	for (let i = 0; i < items.length; i += 1) {
		str += fn(items[i], i);
	}
	return str;
}

const missing_component = {
	$$render: () => ''
};

function validate_component(component, name) {
	if (!component || !component.$$render) {
		if (name === 'svelte:component') name += ' this={...}';
		throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
	}

	return component;
}

function debug(file, line, column, values) {
	console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console
	console.log(values); // eslint-disable-line no-console
	return '';
}

let on_destroy;

function create_ssr_component(fn) {
	function $$render(result, props, bindings, slots) {
		const parent_component = exports.current_component;

		const $$ = {
			on_destroy,
			context: new Map(parent_component ? parent_component.$$.context : []),

			// these will be immediately discarded
			on_mount: [],
			before_render: [],
			after_render: [],
			callbacks: blank_object()
		};

		set_current_component({ $$ });

		const html = fn(result, props, bindings, slots);

		set_current_component(parent_component);
		return html;
	}

	return {
		render: (props = {}, options = {}) => {
			on_destroy = [];

			const result = { head: '', css: new Set() };
			const html = $$render(result, props, {}, options);

			run_all(on_destroy);

			return {
				html,
				css: {
					code: Array.from(result.css).map(css => css.code).join('\n'),
					map: null // TODO
				},
				head: result.head
			};
		},

		$$render
	};
}

function get_store_value(store) {
	let value;
	store.subscribe(_ => value = _)();
	return value;
}

function bind(component, name, callback) {
	if (component.$$.props.indexOf(name) === -1) return;
	component.$$.bound[name] = callback;
	callback(component.$$.ctx[name]);
}

function mount_component(component, target, anchor) {
	const { fragment, on_mount, on_destroy, after_render } = component.$$;

	fragment.m(target, anchor);

	// onMount happens after the initial afterUpdate. Because
	// afterUpdate callbacks happen in reverse order (inner first)
	// we schedule onMount callbacks before afterUpdate callbacks
	add_render_callback(() => {
		const new_on_destroy = on_mount.map(run).filter(is_function);
		if (on_destroy) {
			on_destroy.push(...new_on_destroy);
		} else {
			// Edge case - component was destroyed immediately,
			// most likely as a result of a binding initialising
			run_all(new_on_destroy);
		}
		component.$$.on_mount = [];
	});

	after_render.forEach(add_render_callback);
}

function destroy(component, detaching) {
	if (component.$$) {
		run_all(component.$$.on_destroy);
		component.$$.fragment.d(detaching);

		// TODO null out other refs, including component.$$ (but need to
		// preserve final state?)
		component.$$.on_destroy = component.$$.fragment = null;
		component.$$.ctx = {};
	}
}

function make_dirty(component, key) {
	if (!component.$$.dirty) {
		dirty_components.push(component);
		schedule_update();
		component.$$.dirty = {};
	}
	component.$$.dirty[key] = true;
}

function init(component, options, instance, create_fragment, not_equal$$1, prop_names) {
	const parent_component = exports.current_component;
	set_current_component(component);

	const props = options.props || {};

	const $$ = component.$$ = {
		fragment: null,
		ctx: null,

		// state
		props: prop_names,
		update: noop,
		not_equal: not_equal$$1,
		bound: blank_object(),

		// lifecycle
		on_mount: [],
		on_destroy: [],
		before_render: [],
		after_render: [],
		context: new Map(parent_component ? parent_component.$$.context : []),

		// everything else
		callbacks: blank_object(),
		dirty: null
	};

	let ready = false;

	$$.ctx = instance
		? instance(component, props, (key, value) => {
			if ($$.ctx && not_equal$$1($$.ctx[key], $$.ctx[key] = value)) {
				if ($$.bound[key]) $$.bound[key](value);
				if (ready) make_dirty(component, key);
			}
		})
		: props;

	$$.update();
	ready = true;
	run_all($$.before_render);
	$$.fragment = create_fragment($$.ctx);

	if (options.target) {
		if (options.hydrate) {
			$$.fragment.l(children(options.target));
		} else {
			$$.fragment.c();
		}

		if (options.intro && component.$$.fragment.i) component.$$.fragment.i();
		mount_component(component, options.target, options.anchor);
		flush();
	}

	set_current_component(parent_component);
}
if (typeof HTMLElement !== 'undefined') {
	exports.SvelteElement = class extends HTMLElement {
		constructor() {
			super();
			this.attachShadow({ mode: 'open' });
		}

		connectedCallback() {
			for (const key in this.$$.slotted) {
				this.appendChild(this.$$.slotted[key]);
			}
		}

		attributeChangedCallback(attr$$1, oldValue, newValue) {
			this[attr$$1] = newValue;
		}

		$destroy() {
			destroy(this, true);
			this.$destroy = noop;
		}

		$on(type, callback) {
			// TODO should this delegate to addEventListener?
			const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
			callbacks.push(callback);

			return () => {
				const index = callbacks.indexOf(callback);
				if (index !== -1) callbacks.splice(index, 1);
			};
		}

		$set() {
			// overridden by instance, if it has props
		}
	};
}

class SvelteComponent {
	$destroy() {
		destroy(this, true);
		this.$destroy = noop;
	}

	$on(type, callback) {
		const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
		callbacks.push(callback);

		return () => {
			const index = callbacks.indexOf(callback);
			if (index !== -1) callbacks.splice(index, 1);
		};
	}

	$set() {
		// overridden by instance, if it has props
	}
}

class SvelteComponentDev extends SvelteComponent {
	constructor(options) {
		if (!options || (!options.target && !options.$$inline)) {
			throw new Error(`'target' is a required option`);
		}

		super();
	}

	$destroy() {
		super.$destroy();
		this.$destroy = () => {
			console.warn(`Component was already destroyed`); // eslint-disable-line no-console
		};
	}
}

exports.create_animation = create_animation;
exports.fix_position = fix_position;
exports.handle_promise = handle_promise;
exports.append = append;
exports.insert = insert;
exports.detach = detach;
exports.detach_between = detach_between;
exports.detach_before = detach_before;
exports.detach_after = detach_after;
exports.destroy_each = destroy_each;
exports.element = element;
exports.svg_element = svg_element;
exports.text = text;
exports.space = space;
exports.empty = empty;
exports.listen = listen;
exports.prevent_default = prevent_default;
exports.stop_propagation = stop_propagation;
exports.attr = attr;
exports.set_attributes = set_attributes;
exports.set_custom_element_data = set_custom_element_data;
exports.xlink_attr = xlink_attr;
exports.get_binding_group_value = get_binding_group_value;
exports.to_number = to_number;
exports.time_ranges_to_array = time_ranges_to_array;
exports.children = children;
exports.claim_element = claim_element;
exports.claim_text = claim_text;
exports.set_data = set_data;
exports.set_input_type = set_input_type;
exports.set_style = set_style;
exports.select_option = select_option;
exports.select_options = select_options;
exports.select_value = select_value;
exports.select_multiple_value = select_multiple_value;
exports.add_resize_listener = add_resize_listener;
exports.toggle_class = toggle_class;
exports.custom_event = custom_event;
exports.destroy_block = destroy_block;
exports.outro_and_destroy_block = outro_and_destroy_block;
exports.fix_and_outro_and_destroy_block = fix_and_outro_and_destroy_block;
exports.update_keyed_each = update_keyed_each;
exports.measure = measure;
exports.set_current_component = set_current_component;
exports.beforeUpdate = beforeUpdate;
exports.onMount = onMount;
exports.afterUpdate = afterUpdate;
exports.onDestroy = onDestroy;
exports.createEventDispatcher = createEventDispatcher;
exports.setContext = setContext;
exports.getContext = getContext;
exports.bubble = bubble;
exports.clear_loops = clear_loops;
exports.loop = loop;
exports.dirty_components = dirty_components;
exports.intros = intros;
exports.schedule_update = schedule_update;
exports.tick = tick;
exports.add_binding_callback = add_binding_callback;
exports.add_render_callback = add_render_callback;
exports.add_flush_callback = add_flush_callback;
exports.flush = flush;
exports.get_spread_update = get_spread_update;
exports.invalid_attribute_name_character = invalid_attribute_name_character;
exports.spread = spread;
exports.escaped = escaped;
exports.escape = escape;
exports.each = each;
exports.missing_component = missing_component;
exports.validate_component = validate_component;
exports.debug = debug;
exports.create_ssr_component = create_ssr_component;
exports.get_store_value = get_store_value;
exports.group_outros = group_outros;
exports.check_outros = check_outros;
exports.on_outro = on_outro;
exports.create_in_transition = create_in_transition;
exports.create_out_transition = create_out_transition;
exports.create_bidirectional_transition = create_bidirectional_transition;
exports.noop = noop;
exports.identity = identity;
exports.assign = assign;
exports.is_promise = is_promise;
exports.add_location = add_location;
exports.run = run;
exports.blank_object = blank_object;
exports.run_all = run_all;
exports.is_function = is_function;
exports.safe_not_equal = safe_not_equal;
exports.not_equal = not_equal;
exports.validate_store = validate_store;
exports.subscribe = subscribe;
exports.create_slot = create_slot;
exports.get_slot_context = get_slot_context;
exports.get_slot_changes = get_slot_changes;
exports.exclude_internal_props = exclude_internal_props;
exports.bind = bind;
exports.mount_component = mount_component;
exports.init = init;
exports.SvelteComponent = SvelteComponent;
exports.SvelteComponentDev = SvelteComponentDev;

},{}],37:[function(require,module,exports){
module.exports = function denodeify(fn) {
	return function() {
		var self = this
		var args = Array.prototype.slice.call(arguments)
		return new Promise(function(resolve, reject) {
			args.push(function(err, res) {
				if (err) {
					reject(err)
				} else {
					resolve(res)
				}
			})

			var res = fn.apply(self, args)

			var isPromise = res
				&& (typeof res === 'object' || typeof res === 'function')
				&& typeof res.then === 'function'

			if (isPromise) {
				resolve(res)
			}
		})
	}
}

},{}],38:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":39,"timers":38}],39:[function(require,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"dup":17}],40:[function(require,module,exports){
const makeEmitter = require(`better-emitter`)

const value = (value = null) => {
	const emitter = makeEmitter({
		get() {
			return value
		},
		set(newValue) {
			emitter.emit(`dirty`)
			value = newValue
			emitter.emit(`value`, value)
		},
		locked() {
			return false
		},
	})

	return addHelpers(emitter)
}

const combine = dependencies => {
	Object.freeze(dependencies)
	let value = resolve(dependencies)
	let locked = false

	const setDirty = () => {
		locked = true
		emitter.emit(`dirty`)
	}

	onEventFromAnyDependency(dependencies, `dirty`, setDirty)

	onEventFromAnyDependency(dependencies, `value`, () => {
		if (!locked) {
			setDirty()
		}

		if (allDependenciesAreUnlocked(dependencies)) {
			value = resolve(dependencies)
			locked = false
			emitter.emit(`value`, value)
		}
	})

	const emitter = makeEmitter({
		get() {
			if (locked) {
				throw new Error(`Unreadable!`)
			}

			return value
		},
		set() {
			throw new Error(`Combinations may not be set`)
		},
		locked() {
			return locked
		},
	})

	return emitter
}

const computed = (dependencies, calculation) => {
	const combined = combine(dependencies)
	const observableValue = value()

	const onValueChange = dependencyValues => observableValue.set(calculation(dependencyValues))

	onValueChange(combined.get())

	combined.on(`value`, onValueChange)

	return Object.assign(addHelpers(observableValue), {
		set() {
			throw new Error(`Transforms may not be set`)
		},
	})
}

module.exports = {
	value,
	computed,
}

const resolve = dependencies => {
	const resolvedDependencies = {}

	Object.entries(dependencies).forEach(([ key, dependency ]) => {
		resolvedDependencies[key] = dependency.get()
	})

	return resolvedDependencies
}

const allDependenciesAreUnlocked = dependencies => Object.values(dependencies).every(
	dependency => !dependency.locked()
)

const onEventFromAnyDependency = (dependencies, event, cb) => {
	Object.values(dependencies).forEach(dependency => {
		dependency.on(event, cb)
	})
}

const addHelpers = observable => Object.assign({}, observable, {
	subscribe(cb) {
		const unsubscribe = observable.on(`value`, cb)

		cb(observable.get())

		return unsubscribe
	},
	map(fn) {
		return computed({ observable }, ({ observable }) => fn(observable))
	},
})

},{"better-emitter":16}],41:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],42:[function(require,module,exports){
const merge = require(`deepmerge`)

module.exports = function SvelteStateRendererFactory(defaultOptions = {}) {
	return function makeRenderer(stateRouter) {
		const asr = {
			makePath: stateRouter.makePath,
			stateIsActive: stateRouter.stateIsActive,
		}

		function render(context, cb) {
			const { element: target, template, content } = context

			const rendererSuppliedOptions = merge(defaultOptions, {
				target,
				props: Object.assign(content, defaultOptions.props, { asr }),
			})

			function construct(component, options) {
				return new component(options)
			}

			let svelte

			try {
				if (typeof template === `function`) {
					svelte = construct(template, rendererSuppliedOptions)
				} else {
					const options = merge(rendererSuppliedOptions, template.options)

					svelte = construct(template.component, options)
				}
			} catch (e) {
				cb(e)
				return
			}

			function onRouteChange() {
				svelte.$set({
					asr,
				})
			}

			stateRouter.on(`stateChangeEnd`, onRouteChange)

			svelte.asrOnDestroy = () => stateRouter.removeListener(`stateChangeEnd`, onRouteChange)
			svelte.mountedToTarget = target

			cb(null, svelte)
		}

		return {
			render,
			reset: function reset(context, cb) {
				const svelte = context.domApi
				const element = svelte.mountedToTarget

				svelte.asrOnDestroy()
				svelte.$destroy()

				const renderContext = Object.assign({ element }, context)

				render(renderContext, cb)
			},
			destroy: function destroy(svelte, cb) {
				svelte.asrOnDestroy()
				svelte.$destroy()
				cb()
			},
			getChildElement: function getChildElement(svelte, cb) {
				try {
					const element = svelte.mountedToTarget
					const child = element.querySelector(`uiView`)
					cb(null, child)
				} catch (e) {
					cb(e)
				}
			},
		}
	}
}

},{"deepmerge":43}],43:[function(require,module,exports){
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define(factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.deepmerge = factory();
    }
}(this, function () {

function isMergeableObject(val) {
    var nonNullObject = val && typeof val === 'object'

    return nonNullObject
        && Object.prototype.toString.call(val) !== '[object RegExp]'
        && Object.prototype.toString.call(val) !== '[object Date]'
}

function emptyTarget(val) {
    return Array.isArray(val) ? [] : {}
}

function cloneIfNecessary(value, optionsArgument) {
    var clone = optionsArgument && optionsArgument.clone === true
    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
}

function defaultArrayMerge(target, source, optionsArgument) {
    var destination = target.slice()
    source.forEach(function(e, i) {
        if (typeof destination[i] === 'undefined') {
            destination[i] = cloneIfNecessary(e, optionsArgument)
        } else if (isMergeableObject(e)) {
            destination[i] = deepmerge(target[i], e, optionsArgument)
        } else if (target.indexOf(e) === -1) {
            destination.push(cloneIfNecessary(e, optionsArgument))
        }
    })
    return destination
}

function mergeObject(target, source, optionsArgument) {
    var destination = {}
    if (isMergeableObject(target)) {
        Object.keys(target).forEach(function (key) {
            destination[key] = cloneIfNecessary(target[key], optionsArgument)
        })
    }
    Object.keys(source).forEach(function (key) {
        if (!isMergeableObject(source[key]) || !target[key]) {
            destination[key] = cloneIfNecessary(source[key], optionsArgument)
        } else {
            destination[key] = deepmerge(target[key], source[key], optionsArgument)
        }
    })
    return destination
}

function deepmerge(target, source, optionsArgument) {
    var array = Array.isArray(source);
    var options = optionsArgument || { arrayMerge: defaultArrayMerge }
    var arrayMerge = options.arrayMerge || defaultArrayMerge

    if (array) {
        return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)
    } else {
        return mergeObject(target, source, optionsArgument)
    }
}

deepmerge.all = function deepmergeAll(array, optionsArgument) {
    if (!Array.isArray(array) || array.length < 2) {
        throw new Error('first argument should be an array with at least two elements')
    }

    // we are sure there are at least 2 values, so it is safe to have no initial value
    return array.reduce(function(prev, next) {
        return deepmerge(prev, next, optionsArgument)
    })
}

return deepmerge

}));

},{}]},{},[11]);
